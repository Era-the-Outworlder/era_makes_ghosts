//---------------------------Miscellaneous Functions--------------------------


OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".gif" //These are the formats your ghost will recognize as image files to set as the background. .png does not work.
		{
			Wallpaperfile = reference0
			
			"\0\s[0]%(floweySpeech) *  FILE %(_filename)%(_fileext). Wallpaper?\n\n[half]/
			\q[Centered,SetWallpaper_0]\n/
			\q[Tiled,SetWallpaper_1]\n/
			\q[Stretched,SetWallpaper_2]\n\n[half]/
			\q[No thanks,SetWallpaper_Cancel]\e"
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au", ".ogg" //Audio file formats
		{
			"\0\s[0]%(floweySpeech) * %(_filename)%(_fileext) is music.\e"
		}
		others //Any other file format. 
		{
			"\0\s[0]%(floweySpeech) *  %(_filename)%(_fileext).\e"
		}
	}
}

//This set of options sets the wallpaper up.

Select.SetWallpaper_0
{
	"\![set,wallpaper,%(Wallpaperfile),center]\0\s[0]%(floweySpeech) *  Centered.\e"
}
Select.SetWallpaper_1
{
	"\![set,wallpaper,%(Wallpaperfile),tile]\0\s[0]%(floweySpeech) *  Tiled.\e"
}
Select.SetWallpaper_2
{
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]%(floweySpeech) *  Stretched.\e"
}
Select.SetWallpaper_Cancel
{
	"\0\s[0]%(floweySpeech) *  No. No. No wallpaper.\e"
}

//---- OnInstallBegin -------------------------------------------------------
 //OnInstallBegin is called when a file with an included install.txt is dropped on the ghost. 
 
OnInstallBegin
 {
	"\0\s[0]%(floweySpeech) *  Contains an install.txt file. Installing.\e"
 }

 //---- OnInstallComplete -------------------------------------------------------
 //OnInstallComplete runs once the file above has finished installing.
 
OnInstallComplete
 {
	"\0"
 	--
	if reference0 == "shell" //This is checking to see if what you installed is classified as a shell in the install.txt.
 	{	
		if reference1 == "Flowey" //This is the name of the shell defined in descript.txt in the shell folder.
		{
		"\s[0]%(narrator) * (You installed a new shell for a little yellow flower.)\e"
		//Replace if needed.
		}
		else //For any other shell they may install.
		{
		"\s[0]%(floweySpeech) * New shell. New. New. New. New. \w8\0\s[0]Shell: %(reference1).\e"
		//%(reference1) here would be the name of the shell they installed. Replace if needed.
		}
 	}
	elseif reference0 == "ghost" //if the type of the file they're installing is a ghost.
 	{
		"\s[0]%(floweySpeech) * New Ghost.\w8 Installed %(reference1).\e"
		//Reference1 here would be the name of the ghost. Replace as needed.
 	}
	elseif reference0 == "balloon" //if the type of file is a balloon
 	{
		"\s[0]%(floweySpeech) * Balloon \w8 Name: %(reference1).\e"
		//Reference1 here would be the name of the balloon. Replace as needed.
 	}
	elseif reference0 == "plugin" //if the type of file is a plug-in, like a saori of some kind.
 	{
		"\s[0]%(floweySpeech) * Installed plug-in %(reference1).\e"
		//Reference1 here would be the name of the plug-in. Replace as needed.
 	}
}

//---- OnInstallFailure -------------------------------------------------------
//If the file you dropped fails to install for one reason or another.

OnInstallFailure
 {
	"\0\s[0]%(floweySpeech) * Failed. Unable to install. \n\n[half]" //this first bit of dialogue begins the explanation of what happened. You can replace this with an appropriate intro statement.
	--
	if reference0 == "unsupported" //These if statements determine how it happened to finish the piece of dialogue. This checks if the reason it failed is because it was unsupported.
	{
	"\s[1]%(floweySpeech) * Can't.\w5\s[0]\e"
	"%(narrator) * (The filetype was not supported.) \w5\s[0]\e"
	}	
	elseif reference0 == "extraction" //This checks if the file didn't extract properly.
	{
	"\s[1]%(floweySpeech) * Unable to extract.\w5\s[0]\e"
	"%(narrator) * (Unable to extract file.) \w5\s[0]\e"
	//See above but for a failed extraction.
	}
 }
 
 //--OnInstallRefuse
 //If the file you dropped can't be installed with this ghost.
 
OnInstallRefuse
 {
	"\0\s[0]%(floweySpeech) * %(nonono) \w8Can't can't can't. \w4Try %(reference0).\w8\s[0]\e"
	"\0\s[0]%(narrator) * (Flowey refused to install the file. Maybe you shuold try giving it to %(reference0) instead?) \w5\s[0]\e"
	
	//reference0 in this function refers to the ghost this file is associated with, probably the name of the ghost listed in its install.txt file. Replace this with what you wish, you can use the reference0 envelope or not if you want.
 }


//**** Uninstallation ******************************************
//You may have noticed in the configuration menus in menu.dic an option to turn Uninstall on or off, as well as a greyed out option to uninstall in the right click menu. These following functions relate to the uninstallation process when it's on. Replace the dialogue in each function as we go along.


//--OnVanishSelecting
//When you select the uninstall option in the menu.

OnVanishSelecting
{
	"\0\s[0]%(floweySpeech) * Whatever. \w8\s[0]\e"
	"\0\s[0]%(narrator) * (Delete f_lowe_y.exe? Y/N?) \w5\s[0]\e"
}

//OnVanishSelected
//When you decide to uninstall them. 

OnVanishSelected
{
	"\0\s[0]%(floweySpeech) * Goodbye %(username). \w8\s[-1]\e"
	"\0\s[0]%(narrator) * (Deleting f_lowe_y.exe) \w5\s[-1]\e"
}


//--OnVanishCancel
//If you select Uninstall from the menu, but decide not to do it.

OnVanishCancel
{
	"\0\s[13]%(floweySpeech) * %(thank)\w8\w8\e"
	"\0\s[13]%(narrator) * (You did the right thing.) \w5\s[-1]\e"
}

//--TalkVanishButtonHold
//I believe this calls if you click and hold the button on either the menu option for uninstalling them, or possibly the option itself. Be careful if you're trying to test this! You'd hate to uninstall all your hard work, right? I'd probably just make sure the dialogue looks right via Script Input and leave it at that.

TalkVanishButtonHold
{
	"\0\s[0] * ...\8\w8\8\w8\8\w8\e"
}


 //---- OnVanished -----------------------------------------
 //OnVanished is a weird little function. Basically, if you uninstall a ghost, it'll automatically go back to the last ghost you were using. They'll then say this line of dialogue about the ghost you just uninstalled. This is very annoying to test as you can imagine! But unlikely to come up super often, I bet. You might as well be thorough and fill this out as well. Make sure to set up both their poses immediately so they both appear when it switches back to them.
 
OnVanished
 {
	"\0\s[0]\1\[10] What a shame...\w8\w8\w8\w8e"
	
	//reference0 here is the name of the other ghost.
}


//**** Mail Checking *******************************************************************
//The next set of functions have to do with checking your email. This function is a slippery little thing - I've had people test it following my directions and have it work, but I've never actually gotten it to report back the right amount of emails myself. Very frustrating. But perhaps you'll have more luck with it, haha.


//*********************Advanced User Info*******************************
//These text boxes are meant for those who have an interest in expanding or using more complicated functions in their ghost. Also for my own reference in the future since I plan on using this template too, haha. If you have no interest in any of this and just want to keep things as simple as possible, feel free to skip these boxes.

//If you want to set up your ghost to check your mail so you can more easily check these messages instead of just writing the dialogue and moving on, it's a little bit tricky, but not super hard.
//Basically, you're going to need to find your POP settings for your email account. Googling your provider + POP should bring it up pretty quick. Once you have the info, you'll go to the right click menu, options, then preferences. A big menu should pop up, and you should see POP in the left side. Click that, and input all the info from the POP page you looked up for your account. Tell your ghost to check your email, and if it works, then congratulations!
//***********************************************************************


 //---- OnBIFFBegin ---------------------------------------------------------------
 //When you first tell the ghost to check your email. An intro statement, if you will. Replace with whatever you like.
 
OnBIFFBegin
 {
	"\0\s[14]%(floweySpeech) * Check_ng... ma_l. \w8\w8\w8\e"
	"\0\s[14]%(narrator) * (Flowey is checking your email.) \w8\w8\w8\e"
	
 }

 
 //---- OnBIFFComplete ---------------------------------------------------------------
 //After they've succeeded in checking your mail, they'll report back with how many new emails you have. Replace the dialogue with whatever would be character appropriate.
 
OnBIFFComplete
 {
	if reference0 == 0 //If you have no new mail.
 	{
 		"\0\s[14]%(floweySpeech) * N_th_ng.. \w8\w8\w8\e"
		"\0\s[14]%(narrator) * (You have no new emails.) \w8\w8\w8\e"
	}
	elseif reference0 == 1 //If you have one new email.
 	{
 		"\0\s[14]%(floweySpeech) * 1! N_w _mail. \w8\w8\w8\e"
		"\0\s[14]%(narrator) * (You have one new email.) \w8\w8\w8\e"
	}
	elseif reference0 > 1 && reference0 < 11 //If you have more than one email but less than eleven.
	{
		"\0\s[14]%(floweySpeech) * %(reference0)! ne_ ema_ls. \w8\w8\w8\e"
		"\0\s[14]%(narrator) * (You have %(reference0) new emails.) \w8\w8\w8\e"
		//reference0 here stores the amount of new email it finds.
	}
	elseif reference0 > 100 //If there are over one hundred new emails.
	{
		"\0\s[14]%(floweySpeech) * %(reference0) emails. \w8\w8\w8\e"
		"\0\s[14]%(narrator) * (You have %(reference0) new emails.You should do something about that.) \w8\w8\w8\e"
	}
 	else //For any other number of emails.
	{
		"\0\s[14]%(floweySpeech) * %(reference0) emails. \w8\w8\w8\e"
		"\0\s[14]%(narrator) * (%(reference0) new emails.) \w8\w8\w8\e"
 	}
}

 //---- OnBIFFFailure ---------------------------------------------------------------
 //Various error messages that can happen when your ghost tries to connect to an email account. Replace the dialogue as appropriate.
 
OnBIFFFailure
 {
	if reference0 == "timeout" //If the connection times out.
 	{
		"\0\s[9]%(floweySpeech) * C_nnecti_n timed _ut. \w8\w8\w8\e"
		"\0\s[9]%(narrator) * (The connection timed out.) \w8\w8\w8\e"
	}
 	elseif reference0 == "kick" //If the account blocks the ghost from accessing it. I think gmail may do this at first to try and protect your account from unapproved applications using it. It gives you the option to change the setting in the warning email they send you about it.
	{
		"\0\s[9]%(floweySpeech) * Acc_ss d_ni_d. \w8\w8\w8\e"
		"\0\s[9]%(narrator) * (Access denied. Check email settings.) \w8\w8\w8\e"
 	}
	elseif reference0 == "defect" //If the information put into the POP menu is wrong.
 	{
		"\0\s[9]%(floweySpeech) * FA_LED. CHECK POP SETT_NGS. \w8\w8\w8\![open,configurationdialog]\e"
		"\0\s[9]%(narrator) * (Login failed. You should check your POP settings.) \w8\w8\w8\![open,configurationdialog]\e"
		
		//Note that this ends with \![open,configurationdialog]. This will open up the preferences menu I described above automatically. More on \! functions in the walkthrough. You can delete the \! tag here if you want to.
	}
 	else //if there's some other kind of error.
	{
		"\0\s[9]%(floweySpeech) * FAILED. %(reference[0]) \w8\w8\w8\e"
		"\0\s[9]%(narrator) * (Connection failed. %(reference[0])) \w8\w8\w8\e"
		
		//reference0 here stores the error message the email server would have given the ghost, hopefully.
 	}
}


 //**** Network Update *****************************************************************

 
 //---- OnUpdateBegin -------------------------------------------------------------
 
OnUpdateBegin
 {
	"\0\s[13]%(floweySpeech) * U_dating\w5.\w5.\w5. \w8\w8\w8\e"
	"\0\s[13]%(narrator) * (Flowey is checking for updates.) \w8\w8\w8\e"
	
 }

 //---- OnUpdateReady ---------------------------------------------------------
 //If the ghost finds new files to update with.
 
OnUpdateReady
 {
	"\0\s[13]%(floweySpeech) * %(reference[0]) F_LES AVA_LABLE. \w8\w8\w8\e"
	"\0\s[13]%(narrator) * (%(reference[0]) new files available for update.) \w8\w8\w8\e"
	
	//reference0 here storing the number of new files. You don't have to use it if you don't want to.
 }


//---- OnUpdateComplete -------------------------------------------------------------
//When the ghost has finished the update process.

OnUpdateComplete
 {
	
	--
	if reference0 == "none" //if the ghost had nothing to update with
 	{
 		"\0\s[13]%(floweySpeech) * NOTHING CHANGED. \w8\w8\w8\e"
		"\0\s[13]%(narrator) * NOTHING CHANGED. \w8\w8\w8\e"
	}
 	else //if the ghost has updated successfully
	{
		if GETTYPE(resetcount) == 3
		{
			_transfer = STRLEN(resetcount)
		
		}
		--

		"\0\s[13]%(floweySpeech) * SOMETHING CHANGED. \w8\w8\w8\e"
		"\0\s[13]%(narrator) * SOMETHING CHANGED. \w8\w8\w8\e"
 	}
}

 //---- OnUpdateFailure -------------------------------------------------------------
 //Error messages if the update process fails in some way.
 
OnUpdateFailure
 {
	if reference0 == "timeout" //if the connection times out
 	{
 		"\0\s[9]%(floweySpeech) * f_AILED. C_onnection l_ost \w8\w8\w8\e"
		"\0\s[9]%(narrator) * (The update failed because the connection timed out.) \w8\w8\w8\e"
	}
 	elseif reference0 == "md5 miss" //This is if the files don't match properly to updates.dau, I think. For example, if a file only partially transferred or somehow got corrupted. This may also come up if you didn't set up the directory and updates.dau properly as outlined on the walkthrough page.
	{
		"\0\s[7]%(floweySpeech) * HASH HASH HASH ##### MD5 hash check failed. \w8\w8\w8\e"
		"\0\s[7]%(narrator) * NOTHING CHANGED. \w8\w8\w8\e"
 	}
	else //for other errors
 	{
		"\0\s[9]%(floweySpeech) * f_AILED. ERROR: %(reference0) \w8\w8\w8\e"
		"\0\s[9]%(narrator) * (Update failed. Looks like %(reference0).) \w8\w8\w8\e"
	}
 }


 //---- OnUpdate.OnDownloadBegin ------------------------------------------------
 //This dialogue plays when they begin downloading a new file. WARNING: if you have big plans for your ghost and are going to make a lot of new image files for it (like... i do, cough) at some point, you're going to want to make these messages very brief, if you even have them at all. The reason is because the user will see these messages for EVERY individual file that they have to download, and if you have, say, 50 pna files in the queue, they will see this dialogue 50 times. Not only that, but displaying the dialogue takes some time, so it also extends the download process.
 //If you aren't planning on adding a ton of files at any point, or are only intending to update the .dic files which will be at most a handful of files, then you can go ahead and put a short message in here. But if your ghost is going to grow in leaps and bounds as you work on it, try and keep these messages as brief as possible to make the process that much faster for your user.
 
OnUpdate.OnDownloadBegin
 {
 	if "aitalk" _in_ reference0 //this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue. If you want to have a specialized bit of dialogue for each type of file, you can expand this with elseifs and by replacing aitalk with whatever file you have in mind. Keep in mind my warning above though.
 	{
 		"\0\s[0]%(floweySpeech) * D_wnl_ading new w_rds. \w8\w8\w8\e"
		"\0\s[0]%(narrator) * (Flowey is downloading new dialogue.) \w8\w8\w8\e"
 	}
 	else //for files not specified above
 	{
		"\0\s[0]%(floweySpeech) * DOWNLOADING\w5.\w5.\w5. \w8\w8\w8\e"
		"\0\s[0]%(narrator) * (Flowey is downloading new files.) \w8\w8\w8\e"
	}
 }

 //---- OnUpdate.OnMD5CompareBegin ---------------------------------------------------
 //This checks the hash value of the files in the directory and the files listed in updates.dau, I believe. It will do this for every file the user downloads, so I again remind you of my warning above! For every file they download, they will have to go through three sets of unique dialogue, and it can get old fast. Not to mention it slows things down a lot. Again, I would recommend keeping this very brief, if not just replacing it with "..." instead.
 
OnUpdate.OnMD5CompareBegin
 {
	"\0\s[0] * Checking the MD5 value.\e"
 }

 //---- OnUpdate.OnMD5CompareComplete --------------------------------------------------
 //After they've checked the MD5 value and it matches. See above about the length of this message.
 
OnUpdate.OnMD5CompareComplete
 {
	"\0\s[0] * MD5 check good.\e"
}

 //---- OnUpdate.OnMD5CompareFailure ---------------------------------------------------
 //If the MD5 values don't match. If you follow my Network Update directions carefully, this shouldn't come up very often, but don't be surprised if you run into it every now and then by forgetting a file here or there.
 
OnUpdate.OnMD5CompareFailure
 {
	"\0\s[0] * The MD5 values don't match.\w8\e"
 }

 
 
 //**** Headlines and RSS Feeds *********************************************************
 //This section has to do with the RSS feeds option on your ghost. If you drag and drop a url on them, they'll add it to a list you can access via the right-click menu, and they'll tell you the last set of updates for the site. This works best with RSS feeds I think, but you can experiment with other sites to see how it works.
 //The headlines you see under the tab are in the headline folder under your base SSP install. So it'd be SSP\headlines. You should see the folders for each linked headline in there. I've very rarely ever messed with them or used them. Likewise, your RSS feeds you've added will be under SSP\rss and I don't think that option will appear in the headlines/RSS tab until you add an RSS feed to a ghost. If you want to clear your RSS feeds or headlines, just delete either of those two folders.
 

 //---- OnHeadlinesenseBegin -----------------------------------------------------------
 //This dialogue comes up when you select something in your RSS feed as an intro, like the other On[Thing]Begin things we've seen so far. Replace as you need.
 
OnHeadlinesenseBegin
 {
	"\0\s[0]%(floweySpeech) * Selected %(reference0).\e"
 }

 //---- OnHeadlinesense.OnFind --------------------------------------------------------
 //This actually displays the feed. My set-up for it is pretty simple but gets the job done, it just has the name of the feed, a line space, then a list of links. You shouldn't have to edit any of these and I probably wouldn't honestly.
 
OnHeadlinesense.OnFind
{
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2\s[0]%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2\s[0]%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2\s[0]%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q [Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*] \q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	"\0\s[0]%(floweySpeech) * DONE. \w8\w8\w8\e"
	"\0\s[0]%(narrator) * (Flowey closed the feed) \w8\w8\w8\e"
	
}

 //---- OnHeadlinesenseComplete -------------------------------------------------------
 //This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
 {
	"\0\s[0]%(floweySpeech) * DONE. %(reference0)\w8\w8\w8\e"
	"\0\s[0]%(narrator) * (%(reference0)) \w8\w8\w8\e"
	
 }

 //---- OnHeadlinesenseFailure ---------------------------------------------------------
 //This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
  {
	if RAND(100) <51
	{
		"\0\s[9]%(floweySpeech) * FAILURE. \w8\n\n[half]"
	
 	--
		if reference0 == "can't download" //if they can't download the rss feed for some reason
		{
			"%(floweySpeech) * C_NNOT DOWNLO_D \w8\w8\s[0]"
		}
		elseif reference0 == "can't analyze" //if they can't read the file for some reason
		{
			"%(floweySpeech) * ANA_YSIS FAI_ED \w8\s[0]"
		}
		else //other errors
		{
			"%(floweySpeech) * ERROR ERROR\w8\s[0]"
		}
	--
		"\e" //And here is the final /e, so you don't need to include it in the if statements above. Another one of the very rare cases this occurs.
	}
	else
	{
		"\0\s[9]%(narrator) * (Something went wrong.)\w8\n\n[half]"	
		
	--
		if reference0 == "can't download" //if they can't download the rss feed for some reason
		{
			"%(narrator) * (Flowey could not download the feed... Strange.)\w8\s[0]"
		}
		elseif reference0 == "can't analyze" //if they can't read the file for some reason
		{
			"%(narrator) * (Flowey couldn't read the files. Weird...)\w8\s[0]"
		}
		else //other errors
		{
			"%(narrator) * (Nobody knows what went wrong.)\w8\s[0]"
		}
	--
		"\e"
	}
}


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts. You'll want to at least make a .nar to distribute your ghost, and if you're going to be using Network Update, you'll also want to make updates2.dau as well. It's unlikely that anyone other than you will see these messages, but you should be thorough and replace them anyway.
//Primarily, you will see these messages when you're creating your updates file or updating your ghost.nar file. More on this on the walkthrough page. However, you could potentially drag and drop another ghost's folder onto them, and they'll also create a nar for that as well, though I've never done that myself. I really wouldn't mess around too much with this. Just follow the directions on the walkthrough page and fill out the dialogue here as required.


 //---- OnUpdatedataCreating -----------------------------------------------------------
 //This will begin the creation of the updates2.dau file. Not unlike the other beginning functions you've seen throughout this file. Replace with whatever you like.
 
OnUpdatedataCreating
 {
	"\0\s[0]%(floweySpeech) * Updates... dau dau dau...\w8\w8\w8\e"
	"\0\s[0]%(narrator) * (The updates2.dau file is being generated) \w8\w8\w8\e"
 }

 //---- OnUpdatedataCreated -------------------------------------------------------------
 //After the updates2.dau file has been successfully created. Replace with whatever.
 
OnUpdatedataCreated
 {
	"\0\s[0]%(floweySpeech) * Done.\w8\w8\w8\e"
	"\0\s[0]%(narrator) * (The deed is done.) \w8\w8\w8\e"
 }

 //---- OnNarCreating ------------------------------------------------------------------
 //Along the same lines, this is when they begin creating a .nar file for your ghost. .nars are the format most ghosts will be in, something similar to a .zip file, and this is the format you'll be distributing your ghost in most likely. Replace the dialogue with whatever you like.
 
OnNarCreating
 {
	"\0\s[0]%(floweySpeech) * .NAR RAN.\w8\w8\w8\e"
	"\0\s[0]%(narrator) * (Creating .nar file.) \w8\w8\w8\e"
 }

 //---- OnNarCreated -------------------------------------------------------------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	"\0\s[0]%(floweySpeech) * %(reference0).Do_e.\w8\w8\w8\e"
	"\0\s[0]%(narrator) * (%(reference0) created.) \w8\w8\w8\e"
 }

 //****　Clock Synchronization　**********************************************************
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//This set of functions was done by the above Korean coder, I think. I'll leave their comment there untouched. 
//If you right click your ghost and go into the Utilities menu, there's an option called NTP Time Sync. That's what this is for!
 

 //----OnSNTPBegin ------------------------------------------------------------------
 //As with the others you've seen above, this is the beginning bit of dialogue for this process.
 
OnSNTPBegin
 {
	"\0\s[0]%(floweySpeech) * TIME. time.\w8\e"
	"\0\s[0]%(narrator) * (Flowey is checking the time.) \w8\e"
	//%(reference0) here is the site they'll be using to check your clock. I wouldn't worry too much about what the site is or where it's defined, it should be accurate. Replace the dialogue with what you need, you don't have to use reference0 if you don't want to.
 }


 //----　OnSNTPCompare----------------------------------------------------------
 //Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. Most of this you don't have to touch, just replace the dialogue as indicated.
 
OnSNTPCompare
 {
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
 		"\0\s[0]%(floweySpeech) * TIME. CORRECT. \w8\e"
		"\0\s[0]%(narrator) * (The time is correct.) \w8\e" //replace this with whatever message you like.
	}
 	else //if your clock doesn't match
	{
	//you can redo this top line up to the \n\n[half] part, but leave the \q options alone.
 		"\0\s[0]%(floweySpeech) * WRONG. \w6\s[0]\n * FIX?\n\n[half]/
		\![*] \q[Yes,OnSNTPEXECUTE]\n/
 		\![*] \q[No,OnSNTPCANCEL]\e"
		
		"\0\s[0]%(narrator) * (Your clock is wrong.}\w6\s[0]\n * (You are given the option of correcting it.)\n\n[half]/
		\![*] \q[Correct it,OnSNTPEXECUTE]\n/
 		\![*] \q[Leave it,OnSNTPCANCEL]\e"
	}
 }

 //----　OnSNTPEXECUTE ------------------------------------------------------------------
 //After they've fixed your clock. Replace with what you want.
 
OnSNTPEXECUTE
 {
	"\0\s[0]%(floweySpeech) * Corrected. \w8\e"
	"\0\s[0]%(narrator) * (The time is now correct.) \w8\e"
 }

 //----　OnSNTPCANCEL ------------------------------------------------------------------
 //If you decide not to change your clock when they tell you it doesn't match. Replace with what you want.
 
OnSNTPCANCEL
 {
	"\0\s[0]%(floweySpeech) * I-i-i-i-idi- Moron. \w8\e"
	"\0\s[0]%(narrator) * (You decide that you like being wrong.) \w8\e"
 }

 //----　OnSNTPFailure ------------------------------------------------------------------
 //If they can't change the clock for some reason, possibly because the site timed out but it could be anything. Replace with what you want.
 
OnSNTPFailure
 {
	"\0\s[4]%(floweySpeech) * Tried... failed... \w8\e"
	"\0\s[4]%(narrator) * (It refused.) \w8\e"
 }


 //--OnDisplayChange----------------------------------------------------------------
 //This is when you change the resolution of your monitor while your ghost is running. Don't mess with any of this, it should be fine as is.
 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }



 //---- OnScreenSaverStart -------------------------------------------------------
 //This happens if your ghost is running when your screensaver starts up. This and OnScreenSaverEnd are optional, you can delete them both if you like. In fact, you can just delete the rest of the functions from this point on if you're tired and lazy, but we're close to the end, so don't give up yet!
 
OnScreenSaverStart
 {
	"\0\s[4]%(floweySpeech) * Ha... ha... \w8\e"
	"\0\s[4]%(narrator) * (The world is strange.) \w8\e"
 }

 //---- OnScreenSaverEnd -------------------------------------------------------
 //When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
 {
	
	"\0\s[14]%(floweySpeech) * Stopped... good. \w8\e"
	"\0\s[14]%(narrator) * (The world returns to 'normal'.) \w8\e"
 }


 //---- OnApplicationBoot ---------------------------------------------------------------
 //This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
 {
	"\0\s[14]%(floweySpeech) * %(reference0) started. \w8\e"
	"\0\s[14]%(narrator) * (%(reference0) started.) \w8\e"
 }

 //---- OnApplicationClose --------------------------------------------------------------
 //See above, but for the program closing.
 
OnApplicationClose
 {
	"\0\s[14]%(floweySpeech) * %(reference0) closed. \w8\e"
	"\0\s[14]%(narrator) * (%(reference0) closed.) \w8\e"
 }

 //---- OnApplicationFileOpen ----------------------------------------------------------
 //I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
 {
	"\0\s[13]%(floweySpeech) * O_ening %(reference0). \w8\e"
	"\0\s[13]%(narrator) * (%(reference0) is being opened.) \w8\e"
 }




 //---- OnBatteryLow -----------------------------------------------------------------
 //This is for when your laptop's battery is low. I don't have a laptop, so I've never really been able to test this. Perhaps someone with a laptop can report back to me with more details about the battery related functions?
 
OnBatteryLow
 {
	"\0\s[14]%(floweySpeech) * %(reference0) pow_r r_maining. \w8\e"
	"\0\s[14]%(narrator) * (You see your battery is low. Only %(reference0) power remains.) \w8\e"
 }
 
 //--OnBatteryCritical-----------------------------------------------------------------
 //Likewise, this is for if your battery is REALLY low. Replace as you like.
 
OnBatteryCritical
{
	"\0\s[9]%(floweySpeech) * Pow_r critical. \w8\e"
	"\0\s[9]%(narrator) * (Flowey thinks you're an idiot for letting your battery get this low.) \w8\e"
}
 
//--OnBatteryNotify--------------------------------------------------------------------
//This I believe checks to see if your laptop is plugged in or not. Originally this bit of code was commented out, so I suspect it may not work. It may need a plug-in of some sort. Either way, you can delete it or fill it out as you like.
//Actually investigating this, leaving this in makes it so the ghost updates you about whether or not your computer is plugged-in constantly, which makes no sense for desktops. No doubt why it was commented out. Just leave it be.

/*
OnBatteryNotify
{
	if reference2 == "online" //If your laptop is plugged in
	{
		"\0\s[0]%(floweySpeech) * The laptop is plugged in.\e"
	}
	elseif reference2 == "offline" //If you unplug your laptop
	{
		"\0\s[0]%(floweySpeech) * Watch your battery.\e"
	}
}
*/


 //---- OnSysResourceLow -----------------------------------------------------------
 //A notification for if your system resources are low. I've never seen this happen and my system resources can run pretty low sometimes (woo windows xp woooo), so I suspect this one also may not work without the right plug-in, but I could be wrong. You might as well fill it out.
 
OnSysResourceLow
 {
	"\0\s[16]%(floweySpeech) * _y_TEM re_ource_ low. \w8\e"
	"\0\s[16]%(narrator) * (You have a feeling the system resources are low.) \w8\e"
 }


 //--OnShellScaling
 //This is a function however that you may actually use! Or at least, I often use it when desktop space is at a premium (which it always is on my computer). If you right click the ghost, you can go to Shell Scaling, which lists a number of different percentages. Those are the percentages your ghost can be scaled in size up or down. You can try them out yourself to get an idea of what I mean. I often scale mine down to get them out of the way sometimes. This adds dialogue whenever you change their scale. You don't have to do this if you don't want to, in which case they will just stay silent when you size them up or down. If that's what you want, just delete the whole thing.
 
OnShellScaling
{
	if reference0 >= 150 //this number is the percentage that you're scaling the ghost up to. In this case, it's 150%.
	{
		"\0\s[0]%(floweySpeech) * %(hahaha)\e"
		"\0\s[16]%(narrator) * (Making Flowey larger... was that a good idea?) \w8\e"
	}
	elseif reference0 == 100 //this is 100%
	{
		"\0\s[0]%(floweySpeech) * Normality.\e"
		"\0\s[16]%(narrator) * (Better this way.) \w8\e"
	}
	elseif reference0 == 50 //this is 50%. You can add any percentage that's listed under shell scaling if you want using more elseifs.
	{
		"\0\s[0]%(floweySpeech) * Pat pat pat patpatpatpathetic.\w8\w8\s[0]\e"
		"\0\s[16]%(narrator) * (Smol and cute.) \w8\e"
	}
}