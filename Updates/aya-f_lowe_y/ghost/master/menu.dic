//---------------------------Menus--------------------------
//This .dic file is primarily concerned with the double-click menus.

//--OpenSakuraMenu %(floweySpeech)
//This is a bit of intro dialogue before the main character opens their menu.
//The \b2 tag tells the ghost to use their big balloon for this dialogue. 

OpenSakuraMenu
{
		"\0\s[0]%(floweySpeech) * \b2 oooooooooOOOOOOOOO \n Ope_ Me_u.\w8\w8\w8\c\_q * Howdy!!"
		"\0\s[0]%(floweySpeech) * \b2 What do you want?"
		"\0\s[0]%(floweySpeech) * \b2 Need something?"
		--
		MenuRun
}

//--MenuRun
//As you just saw above. 

MenuRun
 {	
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	//These four statements basically get the day of the week, whether it's AM or PM, the hour, and the time. It's putting together the information to display the time at the bottom of the balloon. Pay it no mind.
	--
	"\n\n\_q\b2" 
	--
	if lastTalk != "" //What this does is check to see if the ghost has already said a random bit of dialogue on its own, essentially by seeing if the lastTalk thing is NOT empty 
	{
	  "\![*] \q[Repeat Last Dialogue,OnLastTalk]\n\n[half]"
	  "\![*] \q[Say that again...,OnLastTalk]\n\n[half]"
	  "\![*] \q[RE-RE-REPE_T,OnLastTalk]\n\n[half]"
	  //If the ghost has said something, it will then display this menu option. 
	}
	--
 	"\![*] \q[Say something. ,altalk]\n\n[half]"
	"\![*] \q[Talk to me. ,altalk]\n\n[half]"
	"\![*] \q[SA_ _NYTHING,altalk]\n\n[half]"
	
	//This option will force the ghost to say something from aitalk if the user clicks it.
	--
	"\![*] \q[Config Menu,configmenu]\n\n[half]"
	"\![*] \q[Configuration,configmenu]\n\n[half]"
	"\![*] \q[C_NFIGURATI_N,configmenu]\n\n[half]"
	
	--
	"\![*] \q[Functions,dosomething]\n\n[half]"
	"\![*] \q[Tools,dosomething]\n\n[half]"
	"\![*] \q[FUNct_ons,dosomething]\n\n[half]"
	
	--
 	"\![*] \q[Nevermind,CANCEL]\n\n\n[half]"
	"\![*] \q[Shut up.,CANCEL]\n\n\n[half]"
	"\![*] \q[N_V_RMIND,CANCEL]\n\n\n[half]"
	//These three lead to the Config Menu, the Function menu, and Cancel. 
	--
	"%(wd) %(nowhour):%(nowmin) %(ap) \n%(month)/%(day)/%(year)\n"
	--
	if resetcount != 0
	{
		_resetdisplay = resetcount
		--
		if RAND(99) > 24
		{
			_resetdisplay = TOBINSTR(resetcount)
		}
		--
		"Reset: %(_resetdisplay)"
	}
}

//Leave this next bit alone.

Select.altalk
{
	AiTalk
}

//Leave this alone
OnLastTalk 
{
	"%(lastTalk)\s[0]\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 		{
 			"AM"
 		}
 	else
 		{
 			"PM"
 		}
}

//This is figuring out the minute. Leave it alone.
Getnowmin
{
	if minute >= 0 && minute <=9
		{
			"0%(minute)"
		}
	else
		{
			"%(minute)"
		}
}

//This is figuring out the hour. Leave it alone.
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
		{
			"0%(hour12)"
		}
	else
		{
			"%(hour12)"
		}
}

//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.

Select.BACKTOMENU
	{
		MenuRun
	}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
	{
		TalkConfig
	}


//--TalkConfig
//This menu allows the user to change their name and other information, as well as put in their birthday and change how often the ghost speaks. You shouldn't need to touch any of what's under TalkConfig, although you can adjust dialogue in the following functions related to it.

TalkConfig
{
	"\0\b[2]\_q\" 
	//This bit of dialogue sets up a large balloon and a quick session, like above, so all the text will appear immediately. The rest is formatted to display the information and options to change it. 
	--
	"f[bold,1]NAME:\f[bold,0] %(username) \n\f[height,10]\![*](\q[Ch-ch-change?,TEACHNAME])\f[height,default]\n"
	--
	"\f[bold,1]PRONOUNS:\f[bold,0]\n%(heshe)/%(himher)/%(hisher) \n\f[height,10]\![*](\q[Ch-__-change?,TEACHPRONOUN])\f[height,default]\n"
	--
	"\f[bold,1]BIRTHDAY\f[bold,0] %(birthdayprint) \n\f[height,10]\![*](\q[C_-__-_hange?,TEACHBDAY])\f[height,default]\n"
	--
	"\f[bold,1]TALK RATE:\f[bold,0] - every %(talktime) \n\f[height,10]\![*](\q[__-__-__ange?,talkinter])\f[height,default]\n\n[half]"
	--	
	"Enable Silent Mode?\n"
	--
	if silentMode == "ON"
	{
		"\f[color,#fb0300]\![*] \q[ON,silenton] \f[color,default]\n \n[-100]\f[align,center]----\n \n[-100]\f[align,right] \![*] \q[OFF,silentoff] \n\n[half]\f[align,left]"
	}
	else
	{
		"\![*] \q[ON,silenton] \n \n[-100]\f[align,center]----\n \n[-100]\f[align,right] \f[color,#fb0300]\![*] \q[OFF,silentoff]\f[color,default]\n\f[align,left]"
		--
		"\f[align,center]\q[Set Volume,volumeslider]\n\n[half]\f[align,left]"
	}
	--
	"Enable Uninstall?\n"
	--
	if deleteshitai == "ON"
	{
		"\f[color,#fb0300]\![*] \q[ON,deleteon] \f[color,default]\n \n[-100]\f[align,center]----\n \n[-100]\f[align,right] \![*] \q[OFF,deleteoff]\n\n[half]\f[align,left]"
	}
	else
	{
		"\![*] \q[ON,deleteon] \n \n[-100]\f[align,center]----\n \n[-100]\f[align,right] \f[color,#fb0300]\![*] \q[OFF,deleteoff]\f[color,default]\n\n[half]\f[align,left]"
	}
	--
	"\![*]\q[ Backbackbackback.,BACKTOMENU]\s[0]\e"
}

//This and the next few set up the pronouns.

Select.TEACHPRONOUN
{
	"\0\s[0]%(floweySpeech) * Do. _o. __.... Pronouns?\w5\n\n[half]\_q/
		\![*] \q[He-His-Him,choicemasc]\n/
		\![*] \q[She-Her-Her,choicefem]\n/	
		\![*] \q[They-Their-Them,choiceneither]\n/
		\![*] \q[Something else...,choicecustom]\s[0]\e"
	
	"\0\s[0]%(narrator) * (You are offered a choice of pronouns.)\w5\n\n[half]\_q/
		\![*] \q[He-His-Him,choicemasc]\n/
		\![*] \q[She-Her-Her,choicefem]\n/	
		\![*] \q[They-Their-Them,choiceneither]\n/
		\![*] \q[Something else...,choicecustom]\s[0]\e"
	
}

Select.choicemasc
{
	
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	mrms = "mister"
	--
	"\0\s[0]%(floweySpeech) * Good. %(mrms)\s[0]\e"
	"\0\s[0]%(narrator) * (F_lowe_y will now call you by the correct pronouns.)\n\n * (You can always change this later)\s[0]\e"
	
	
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	mrms = "miss"
	--
	"\0\s[0]%(floweySpeech) * Good. %(mrms)\s[0]\e"
	"\0\s[0]%(narrator) * (F_lowe_y will now call you by the correct pronouns.)\n\n * (You can always change this later)\s[0]\e"
	
		
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	mrms = "friend"
	--
		"\0\s[0]%(floweySpeech) * Good. %(mrms)\s[0]\e"
		"\0\s[0]%(narrator) * (F_lowe_y will now call you by the correct pronouns.)\n\n * (You can always change this later)\s[0]\e"
	
}

Select.choicecustom //for people with less common pronouns
{
	presuffix = "open"
	--
	"\0\s[0]%(narrator) * (Enter the first of your pronouns, ex.'they')\![open,inputbox,OnHeSheTheyTeach,-1]\s[0]\e"
}

//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}

// Enable/Disable Silent Mode
Select.silenton
{
	silentMode = "ON"
	TalkConfig
}

Select.silentoff
{
	silentMode = "OFF"
	TalkConfig
}

Select.volumeslider
{
	"\C\![open,sliderinput,OnSetVolume,,%(volume),1,100]"
}

OnSetVolume
{
	volume = reference0
	TalkConfig
}
//This next set of functions handles inputting the user's birthday.

Select.TEACHBDAY
	{
		dayslot = GetDaySlot //This is setting up in case today is the user's birthday.
		
		"\0\s[0]%(floweySpeech) * Birth month. \w8 [inputbox_integer].\![open,inputbox,OnUserBornMonth,-1]\s[0]\e"
		"\0\s[0]%(narrator) * (Enter your birth month as an integer.)\![open,inputbox,OnUserBornMonth,-1]\s[0]\e"
		
		
	}

//--OnUserBornMonth
//This takes the value that the user put into the input box above and evaluates it.

OnUserBornMonth
	{
		_tempmonth = reference0 //this stores what the user input in as a variable called _tempmonth
		if _tempmonth >= 1 && _tempmonth <= 12 //if the month is a valid month
			{
			bornmonth = _tempmonth
			bornmonthprint = Printmonth
			
			"\0\s[0]%(floweySpeech) * %(bornmonthprint).%(bornmonthprint).%(bornmonthprint).%(bornmonthprint).%(bornmonthprint).\n\w8Day?\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
			"\0\s[0]%(narrator) * (You tell him you were born in %(bornmonthprint))\n\w8 * (What was the day?)\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
			}
		else //if the month isn't a valid month, like 32 or something.
			{
			"\0\s[0]%(floweySpeech) * _s th_s _ JOKOKO__ JOKE?? Are you [swap_status]?\![open,inputbox,OnUserBornMonth,-1]\s[0]\e"
			"\0\s[0]%(narrator) * (The number you gave F_lowe_y did not match up with a month.)\n\w8 * (Are you proud of yourself?)\![open,inputbox,OnUserBornMonth,-1]\s[0]\e"
			}
	}

//This puts the name to the number of the month. No need to mess with these.
Printmonth
{
	if bornmonth == 1
	{
		"January"
	}
	elseif bornmonth == 2
	{
		"February"
	}
	elseif bornmonth == 3
	{
		"March"
	}
	elseif bornmonth == 4
	{
		"April"
	}
	elseif bornmonth == 5
	{
		"May"
	}
	elseif bornmonth == 6
	{
		"June"
	}
	elseif bornmonth == 7
	{
		"July"
	}
	elseif bornmonth == 8
	{
		"August"
	}
	elseif bornmonth == 9
	{
		"September"
	}
	elseif bornmonth == 10
	{
		"October"
	}
	elseif bornmonth == 11
	{
		"November"
	}
	else
	{
		"December"
	}
}

//This adds an appropriate suffix to the number for the day. 

Printday
{
	if bornday == 1 || bornday == 21 || bornday == 31
	{
	"%(bornday)st"
	}
	elseif bornday == 2 || bornday == 22
	{
	"%(bornday)nd"
	}
	elseif bornday == 3 || bornday == 23
	{
	"%(bornday)rd"
	}
	else
	{
	"%(bornday)th"
	}
}	

//--OnUserBornDay
//This is much like the above function OnUserBornMonth. It'll take the value the user put in for the day and analyze it.

OnUserBornDay
{
	tempday = reference0 //storing the input in tempday
	
	if bornmonth == 1 || bornmonth == 3 || bornmonth == 5 || bornmonth == 7 || bornmonth == 8 || bornmonth == 10 || bornmonth == 12 //This is checking to see if it's one of the months with 31 days.
		{
			if tempday >= 1 && tempday <= 31 //if it falls in the right range
				{
					bornday = tempday
					borndayprint = Printday
					userbirthday = "%(bornmonth)month %(bornday)day"
					birthdayprint = "%(bornmonthprint) %(borndayprint)"
					
					"%(birthchecked)"
					
				}
			else 
				{
					
					"\0\s[0]%(floweySpeech) * Do do do do do you like lilililike watching me suffer??\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
					"\0\s[0]%(narrator) * (The number you gave F_lowe_y could not possily be a day of the month.)\n\w8 * (Try again.)\![open,inputbox,OnUserBornMonth,-1]\s[0]\e"
					
				}
		}
	elseif bornmonth == 2 //if the month is february
		{
			if tempday >= 1 && tempday <= 29 //and the day falls in the right range
				{
					bornday = tempday
					borndayprint = Printday
					userbirthday = "%(bornmonth)month %(bornday)day"
					birthdayprint = "%(bornmonthprint) %(borndayprint)"
					
					"%(birthchecked)"
					
				}
			else
				{
					"\0\s[0]%(floweySpeech) * Do do do do do you think I'm an idiot??\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
					"\0\s[0]%(narrator) * (The number you gave F_lowe_y could not possily be a day of the month.)\n\w8 * (Try again.)\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
				}
		}
	else //if it's any other month than those
		{
			if tempday >= 1 && tempday <= 30 //if the day falls between these values
				{
					bornday = tempday
					borndayprint = Printday
					userbirthday = "%(bornmonth)month %(bornday)day"
					birthdayprint = "%(bornmonthprint) %(borndayprint)"
					
					"%(birthchecked)"
				}
			else
				{
					"\0\s[0]%(floweySpeech) * Do do do do do you think I'm an idiot??\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
					"\0\s[0]%(narrator) * (The number you gave F_lowe_y could not possily be a day of the month.)\n\w8 * (Try again.)\![open,inputbox,OnUserBornDay,-1]\s[0]\e"
				}
		}		
}

//--birthchecked
//This is the new envelope you saw me point out above. As you can see here, you can actually call dialogue in a function with an envelope, even when it has if and else statements like here! Which can be pretty handy. Again, more on envelopes in word.dic. Creative ghostmakers can find handy ways to exploit this, I'm sure.

birthchecked
{
	if userbirthday == dayslot //if today is the user's birthday
		{
			if userbirthday == "12month 25day"
			{
				"\0\s[0]%(floweySpeech) \w8\w8* Merry\w8\w8 Gyftmas\w8\c\_q * Merry Christmas.\w8\w8\s[0]\e"
				"\0\s[0]%(narrator) * (It's your birthday today.)\n * (And it's Christmas, too?)\w8\w8\w8\s[0]\e"
			}
			else
			{
			"\0\s[12]%(floweySpeech) * %(HAPPY) \c%(floweySpeech) *Happy birthday, %(username).\w8\w8\w8\w8\w8\w8\s[0]\e"
			
			"\0\s[0]%(narrator) * (It's your birthday today.)\w8\w8\w8\s[0]\e"
			}
		}
	elseif userbirthday == "12month 25day"
		{
			"\0\s[0]%(narrator) * (That's right, you were born on Christmas...)\w8\w8\w8\s[0]\e"
		}
	else //if the birthday is not listed above.
		{
			"\0\s[0]%(floweySpeech) * %(bornmonthprint) %(borndayprint)? Is _ha_... righ_...\s[0]\e"
			"\0\s[0]%(narrator) * (%(bornmonthprint) %(borndayprint))\n * (F_lowe_y will remember that.)\w8\w8\w8\s[0]\e"
		}
}

//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 	{
 		"\0\s[0]%(floweySpeech) * \b2 Change [talktime]? \w8\0\s[0] talktime is currently %(talktime)."
		"\0\s[0]%(narrator) * \b2 You can change how often F_lowe_y speaks.\w8\0\s[0] The current rate is every %(talktime)."
		//note the new envelope here for %(talktime). You'll see it again in a second. You can replace the dialogue above with whatever you like, just make sure it ends with ./ and not \s[0]\e.
		--
		
 		"\0\n\n[half]/
 		\![*]\q[ Every 30 seconds,TALKMAX]\n/
		\![*]\q[ Every minute,TALKHIGH]\n/
 		\![*]\q[ Every 3 minutes,TALKNORMAL]\n/
		\![*]\q[ Every 5 minutes,TALKPOOR]\n/
 		\![*]\q[ Don't speak,TALKNONE]\n\n[half]/
		\![*]\q[ Don't change,TalksTill]\s[0]\e"
	}

//If the user doesn't want to change the rate. You can change all of the dialogue in any of these options if you want to reflect the choice the user made. You TECHNICALLY could also change the value in talktime to reflect some other way of measuring time but I would NOT recommend it, it'd just be confusing I'm sure.
Select.TalksTill
	{
		"\0\s[0]%(floweySpeech) * No change.\s[0]\e"
	}

//If the user chooses every 30 seconds.
Select.TALKMAX
	{
 		talktime = "30 seconds" //this sets up the envelope properly
		aitalkinterval = 45 //this changes the actual rate
		
 		"\0\s[0]%(floweySpeech) * 30 seconds.\s[0]\e"
	}

//If the user chooses every minute.
Select.TALKHIGH
	{
 		talktime = "minute"
		aitalkinterval = 90
		
 		"\0\s[0]%(floweySpeech) * 1 minute.\s[0]\e"
	}

//If the user chooses every three minutes.
Select.TALKNORMAL
	{
 		talktime = "3 minutes"
		aitalkinterval = 270
		
 		"\0\s[0]%(floweySpeech) * 3 minutes.\s[0]\e"
	}

//If the user chooses every five minutes. This is the default rate the ghost will start up in, as seen in bootend.dic.
Select.TALKPOOR
	{
 		talktime = "5 minutes"
		aitalkinterval = 400
		
 		"\0\s[0]%(floweySpeech) * 5 minutes.\s[0]\e"
	}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
	{
 		talktime = "never"
		aitalkinterval = 0
		
		"\0\s[0]%(floweySpeech) * ...\s[0]\e"
	}

	
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
	{
		OnTeachName	
	}

	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
	{
		"\0\s[0]%(floweySpeech) * Nevermind. \s[0]\e"
		
		"\0\s[0]%(floweySpeech) * Whatever. \s[0]\e"
 	}

	
//Going back to the MenuRun function we finished above, this is if someone selects the Functions option, linked to dosomething. As you can see, it ends up as Select.dosomething.

Select.dosomething
{
 		"\0\s[0]%(floweySpeech) *\b2 ...\n\n"
 		"\0\s[0]%(floweySpeech) *\b2 ACC_SSING FUNCTION M_NU\n\n"
		"\0\s[0]%(narrator) *\b2 (You ask F_lowe_y to do something for you.)\n\n"
		
		
		--
 		"\![*] \q[Open Calendar,CALENDAR]\n\n[half]/
		\![*] \q[Check Email,MailCheck]\n\n[half]/
		\![*] \q[Open SSP Preferences,sspconfig]\n\n[half]/
		\![*] \q[Empty Recycle Bin,ChoiceGarbagecan]\n\n[half]/
		\![*] \q[System Information,ChoiceSystemInformation]\n\n[half]\n/
 		\![*] \q[Back to main menu,BACKTOMENU]\s[0]\e"
}

//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]%(floweySpeech) * Op_ning th_ cal_nder.\![open,calendar]\s[0]\e"
	
	//You can replace the dialogue here up to the \!.
	//Advanced users, can you break it down yet? It's basically just using \! to open calender.exe or dll or whatever SSP uses to make it happen.
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]%(floweySpeech) * _pening the SSP c_nfig menu.\![open,configurationdialog]\s[0]\e"
	
	//Again, you can replace up to the \! tag.
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	//Don't touch this line. f
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[-1]\w8\w8\w8\w8\s[0]%(floweySpeech) * IT IS EMPTY.\e"
		
		
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]%(floweySpeech) * Emptying... \w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\c\s[0] * Done.\e"
		
		
		//Somewhat similar to the above, but notice the \![raise],OnGarbagecanEmpty] tag in there. That's what actually empties the recycle bin, so make sure you don't delete that tag. Otherwise, replace the dialogue as you want.
		//As you can see, you can have multiple pieces of dialogue in here, just like you can for many other functions scattered through the .dic files. If you only want the one, just delete the others, or if you want to add more, just copy and paste and write new dialogue as it comes to you. This applies to when the recycle bin is empty as well.
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. Don't touch any of this either. For those curious though, note that this is done using another SAORI, this time saori_cpuid.dll.
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\s[0]\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. You can leave this alone.
Select.MailCheck
	{
		"\![biff]\s[0]\e"
	}


//This is when the user ends their headline session. Headlines are detailed more in etc.dic. Replace dialogue with what strikes you.
Select.HEADLINECANCEL
 	{
 		"\0\s[0]%(floweySpeech) * DONE. \s[0]\e"
	}

	
//---- OnChoiceTimeout ---------------------------------------------------------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
 {
	"\0\s[0]%(floweySpeech) * Come back when-when-when you actually want something.\s[0]\e"
 }

 
