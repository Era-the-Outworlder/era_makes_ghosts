//---------Booting and Ending--------
//This .dic file contains booting and ending dialogue, as well as several other functions.

//----OnFirstBoot----
//~~~~Runs after new installation of ghost, only if ghost was installed from .nar file. Also declares and initialises variables
//~~~~I've used variables without declaring them first here,and it was a nightmare. <3Era~~~~


OnFirstBoot
{
	//Not reccommended to remove any of these, but more can and should be added to declare variables if you're going to use any.
 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	passmin = 0 
	passsec = 0 // These two keep track of the time.
 	username         = "USER" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 400 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	silentmode = "OFF"
	//The foloowing are counters for F_lowe_y's... game.
	knifetime = 0
	killcount = 0
	resestcount = 0
	
	if reference0 == 0 //Don't touch this line.
 	{
		
		"\![enter,passivemode]\0\s[13]\_v[HELP_text.mp3] * (Flowey is attempting to introduce you to the SSP Ghost system.)\w8\w8\n\s[0]\_v[sound_FLOWEY.mp3] * Howdy!\n\n[half]/
		\w5\_q\![*] \q[He/Him/His,choicefirsthehim]\n/
		\![*] \q[She/Her/Hers,choicefirstsheher]\n/
		\![*] \q[They/Them/Their,choicefirsttheythem]\n/
		\![*] \q[Something else...,choicefirstcustom]\s[0]\e"
		
		
 	}
	else
 	{
		
 		{
 		"\0\s[9]\_v[sound_FLOWEY.mp3] * Problem. Fix.\![leave,passivemode]\s[0]\e"
		"\0\s[9]\_v[HELP_text.mp3] * (A problem was encountered.)\![leave,passivemode]\s[0]\e"
		}
 	}
}



Select.choicefirsthehim
{
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	mrms = "mister"
	--
	NameInput
}

Select.choicefirstsheher
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	mrms = "miss"
	--
	NameInput
}

Select.choicefirsttheythem
{
	himher = "them"
	heshe = "they"
	hisher = "their"
	mrms = "friend"
	--
	NameInput
}

Select.choicefirstcustom
{
	presuffix = "open"
	"\0\s[0]\_v[HELP_text.mp3] * (Enter the first of your pronouns, ex.'they')\![open,inputbox,OnHeSheTheyTeach,-1]\s[0]\e"
	--
	NameInput
}


//--NameInput

//NameInput is the next step in our introduction sequence. Now that the ghost has the pronouns set properly, they can ask the user for their name.

NameInput
{
	"\0\s[0]\_v[sound_FLOWEY.mp3] * Name. Name. \![leave,passivemode]\w8\s[0] * Name. Fallen Human. Fallen... name? \![open,inputbox,OnNameTeach,-1]\s[0]\e"
	"\0\s[0]\_v[HELP_text.mp3] Name the Fallen Human \![leave,passivemode]\w8\s[0]  \![open,inputbox,OnNameTeach,-1]\s[0]\e"
	
}

//--GetTimeSlot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day. If you're uninterested, just ignore it. Either way, don't touch it. If you are going to use it though, make a note of the names used for each chunk of time, like earlymorning or lunch. Those are the names you'll be using later.

GetTimeSlot
{
	if hour >= 5 && hour <= 8
	{
		"earlymorning"
	}
	elseif hour >= 9 && hour <= 11
	{
		"morning"
	}
	elseif hour >= 12 && hour <= 14
	{
		"lunch"
	}
	elseif hour >= 15 && hour <= 17
	{
		"afternoon"
	}
	elseif hour >= 18 && hour <= 20
	{
		"evening"
	}
	elseif hour >= 21 && hour <= 24
	{
		"latenight"
	}
	else
	{
		"midnight"
	}
}
//*********************Advanced User Info*******************************
//Do you see how this function is determining what time of day it is? It's using larger than/smaller than operators to isolate a range of time to define. For example, "hour >= 21 && hour <= 24" defines an hour that's greater than/equal to 21 AND less than/equal to 24. You can use this basic method to define other things too, such as the seasons. Keep this in mind! You never know when it might come in handy. I talk about operators more in the coding walkthrough page.
//***********************************************************************


//--GetDaySlot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday. Either way, don't touch it.

GetDaySlot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost. It will run every time you boot your ghost, as a matter of fact.

OnBoot
 {
	lastTalk = "" //These values you may recognize from OnFirstBoot up there. Just pay them no mind.
	passmin = 0
	passsec = 0
	
 	"\0\s[0] " //This sets them up in their neutral pose for now.
	
	
	--
	dayslot = GetDaySlot
	timeslot = GetTimeSlot 
	
	if dayslot == userbirthday 
	
	{
				"\s[0]\_v[sound_FLOWEY.mp3] * It's %(bornmonthprint) %(borndayprint).\w8\n * Happy birthday, %(username).\s[0]\e" 
	
				
	}
	
	elseif dayslot == "6month 6day" 
	
	{
				"\s[0]\_v[sound_FLOWEY.mp3] * Today. June 6th.\s[0]\e"
	}
	elseif dayslot == "7month 4day"
	{
				"\s[0]\_v[sound_FLOWEY.mp3] * Fourth. 4th. Fourth. July.\s[0]\e"
				
				
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk



normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19. You can change these numbers or values to anything you like! As such you can check any combination of date and day and time for potential boot dialogue. You can also add more elseif checks for other days if you want.
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * It's Saturday night.\s[0]\e"
		}
	elseif RAND(100) < 40 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur. Remember, you can have multiple lines of dialogue within one set of brackets like this! You just need to make sure they're all enclosed in their own set of quotation marks.
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * (Gurgling noises)\s[0]\e"
	
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function. Do you remember the names that it defined? Now we're going to use them!
		
		if timeslot == "earlymorning" //The following dialogue will be called if they are booted during the time specified in GetTimeSlot (in this case, the hour being more than/equal to 5 but less than/equal to 8). Remember, you can add as many lines of dialogue here as you want, or take away as many as you want! Replace the dialogue here with what you see fit.
		{
		"\0\s[0] * Early. \s[0]\e"
		
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * Bleah. \s[0]\e"
		
		}
		elseif timeslot == "lunch"
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * Eat.\s[0]\e"
		}
		elseif timeslot == "afternoon"
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * Afternoon. \s[0]\e"
		}
		elseif timeslot == "evening"
		{
 		"\0\s[0]\_v[sound_FLOWEY.mp3] * Late. \s[0]\e"
		}
		elseif timeslot == "latenight"
		{
 		"\0\s[0]\_v[sound_FLOWEY.mp3] * Laaaaaaate.\s[0]\e"
		
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * MIDNIGHT\w8\s[0]\e"
		
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. 

OnClose
 {
 timeslot = GetTimeSlot //as you saw above, it's checking the time.
 --
	if passmin >= 5	//This checks to see if you've had them open for at least five minutes.
		{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * Bye\w8\w8"	
		"\0\s[0]\_v[HELP_text.mp3] * (You tell Flowey you'll see him later.)\w8\w8"	
 		
 		}
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[0]\_v[sound_FLOWEY.mp3] * [flowey_greeting_string] BYE\w8\w8"
		
 	}
 	--
	"\-\s[0]\e" //this bit of code actually closes and ends the ghost. Because \s[0]\e is here, you don't have to end each line above with it. Again, this will come up very rarely, so OnClose is an unusual case.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 

//--OnWindowStateRestore

//This will run when you minimize them and then bring them back up. Replace with what you like.

OnWindowStateRestore
 {
	"\0\s[0]\_v[sound_FLOWEY.mp3] * Back\w8\w8\s[0]\e"
	"\0\s[0]\_v[HELP_text.mp3] * (Flowey has returned.)\w8\w8\s[0]\e"
}


//--OnGhostChanging

//This runs whenever you change or reload the ghost. You can change ghosts by going into the right click menu and going to Change Ghost, but this dialogue will also be called if you reload them using Utilities->Reload Ghost. Protip: If you are going to make a ghost, you will be reloading it A LOT.
//Note: If you reload your ghost using the developer console instead of Utilities->Reload Ghost, it won't do this dialogue, so don't freak out if it doesn't show up.
 
OnGhostChanging
 {
	if reference0 == "f_lowe_y" 
	{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * Re-re-re-re-re-re-re\w8\w8 LOADING\w3.\w3.\w3.\s[0]\e"
		"\0\s[0]\_v[HELP_text.mp3] * (The ghost of Flowey is reloading.)\s[0]\e"
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * LOADING %(reference0). \w8Bye.\w8\w8\s[0]\e"
		"\0\s[0]\_v[HELP_text.mp3] * (You decide to switch to someone else.)\s[0]\e"
		
		
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]" //this sets up their default poses
	--
	if reference0 == "f_lowe_y" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * LOADED\s[0]\e"
		"\0\s[0]\_v[HELP_text.mp3] * (Ghost %(reference0) reloaded.)\s[0]\e"
	}
	else //If you're switching to them from another ghost...
	{
		"\0\s[0]\_v[sound_FLOWEY.mp3] * %(reference0)...\s[0]\e"
		"\0\s[0]\_v[HELP_text.mp3] * (Ghost '%(reference0)' loaded.)\s[0]\e"

		//Again, %(reference0) in this function is the name of the ghost in question. As above, replace these two lines of dialogue what what'd be appropriate for your ghost.
	}
}

