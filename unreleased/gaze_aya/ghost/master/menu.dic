//---------Menus--------
//This .dic file is primarily concerned with the double-click menus for ghosts. 


//--OpenSakuraMenu
//This is a bit of intro dialogue 

OpenSakuraMenu
{
		"\0\s[0]\_v[trill.wav]\b2  ... Yes?"
		"\0\s[0]\_v[trill.wav]\b2  *this will have some wild animation*"
		"\0\s[0]\_v[trill.wav]\b2 How can I help you?"
		--
		MenuRun
}

//--MenuRun
//As you just saw above. This actually fills out the rest of the menu. 

MenuRun
{	
	//Get the day of the week, whether it's AM or PM, the hour, and the time.
 	wd = GetWeekDay
 	ap = GetAP
 	nowmin = Getnowmin
 	nowhour = Getnowhour
	--
	//Two new lines, quick session, large balloon
	"\n\n\_q\b2" 
	--
	//Check to see if the ghost has already said something from aitalk
	if lastTalk != "" 
	{
		//If the ghost has said something, it will then display this menu option. 
		"\![*]\q[Repeat Last Dialogue,OnLastTalk]\n\n[half]"
	}
	--
	//This option will force the ghost to say something from aitalk if the user clicks it.
 	"\![*]\q[Say something,altalk]\n"
	--
	//These three lead to the Config Menu, the Function menu, and Cancel.
	"\![*]\q[Config Menu,configmenu]\n/
	\![*]\q[Functions,dosomething]\n\n[half]/
 	\![*]\q[Nevermind,CANCEL]\n\n\n[half]%(wd) %(nowhour):%(nowmin) %(ap), %(month)/%(day)/%(year)\e"
	
}

//Leave this next bit alone.

Select.altalk
{
	AiTalk
}

//Leave this alone
OnLastTalk 
{
	"%(lastTalk)\e"
}

//This is figuring out what day of the week it is. Leave it alone.
GetWeekDay
{
	if weekday == 0
	{"Sun"}
	elseif weekday == 1
	{"Mon"}
	elseif weekday == 2
	{"Tue"}
	elseif weekday == 3
	{"Wed"}
	elseif weekday == 4
	{"Thu"}
	elseif weekday == 5
	{"Fri"}
	else
	{"Sat"}
}

//This is finding out whether it's AM or PM. Leave it alone.
GetAP
{
 	if hour >= 0 && hour <= 11
 	{
 		"AM"
 	}
 	else
 	{
		"PM"
	}
}

//This is figuring out the minute. Leave it alone.
Getnowmin
{
	if minute >= 0 && minute <=9
	{
		"0%(minute)"
	}
	else
	{
		"%(minute)"
	}
}

//This is figuring out the hour. Leave it alone.
Getnowhour
{
	if hour12 >= 0 && hour12 <=9
	{
		"0%(hour12)"
	}
	else
	{
		"%(hour12)"
	}
}

//If someone selects an option linked to BACKTOMENU, it will go back to MenuRun.

Select.BACKTOMENU
{
	MenuRun
}

//If someone selects configmenu, this will lead to TalkConfig.
Select.configmenu
{
	TalkConfig
}


//--TalkConfig
//This menu allows the user to see and change their name and other information, as well as how often the ghost speaks.

TalkConfig
{
	"\0\b[2]\_q\" 
	
	--
	"f[bold,1]Your name:\f[bold,0] %(username) \n\f[sup,1](\q[Change it?,TEACHNAME])\f[sup,0]\n"
	--
	"\f[bold,1]Your pronouns:\f[bold,0] %(heshe)/ %(himher)/ %(hisher) \n\f[sup,1](\q[Change them?,TEACHPRONOUN])\f[sup,0]\n"
	--
	"\f[bold,1]Your birthday:\f[bold,0] %(birthdayprint) \n\f[sup,1](\q[Change it?,TEACHBDAY])\f[sup,0]\n\n"
	--
	"\f[bold,0]The Talk Rate is currently: %(talktime) \n\f[sup,1](\q[Change it,talkinter])\f[sup,0]\n\n"
	--		
	{
		"\![*]Enable Uninstall? (NOW : %(deleteshitai))\n\q[ON,deleteon] \q[OFF,deleteoff]\n\n[half]\n"
	}
	--
	"\![*]\q[Return to the menu,BACKTOMENU]\e"
}
//This is when the user chooses to change their name. It's linked to the functions outlined in nameteach.dic. Nothing to touch here.
Select.TEACHNAME
{
	OnTeachName	
}

//Setting Pronouns

Select.TEACHPRONOUN
{
	"\0\s[0]\_v[trill.wav]What are your pronouns?\w5\n\n[half]\_q/
	\![*]\q[He-Him-His,choicemasc]\n/
	\![*]\q[She-Her-Her,choicefem]\n/	
	\![*]\q[They-Them-Their,choiceneither]\n/
	\![*]\q[Something else...,choicecustom]\s[0]\_v[trill.wav]\e"
}

Select.choicemasc
{
	
	presuffix = "masculine"
	himher = "him"
	heshe = "he"
	hisher = "his"
	mrms = "mister"
	--
	"\0\s[0]\_v[trill.wav]Your pronouns are %(heshe), %(himher), and %(hisher).\e"
	
	
}

Select.choicefem
{
	presuffix = "feminine"
	himher = "her"
	heshe = "she"
	hisher = "her"
	mrms = "miss"
	--
	"\0\s[0]\_v[trill.wav]Your pronouns are %(heshe), %(himher), and %(hisher).\e"
	
		
}

Select.choiceneither
{
	presuffix = "undefine"
	himher = "them"
	heshe = "they"
	hisher = "their"
	mrms = "friend"
	--
		"\0\s[0]\_v[trill.wav]Your pronouns are %(heshe), %(himher), and %(hisher).\n I am glad to be able to refer to you correctly, %(username).\e"
	
}

Select.choicecustom //for people with neopronouns or mixed pronouns.
{
	presuffix = "open"
	--
	"\0\s[0]\_v[trill.wav]What is your Nominative pronoun? (ex. they) \![open,inputbox,OnHeSheTheyTeach,-1]\s[0]\_v[trill.wav]\e"
}

//This next one handles inputting the user's birthday.

Select.TEACHBDAY
{
	OnGetBirthday		
}

//These two options toggle whether or not you can delete your ghost. Leave them alone.

Select.deleteon
{
	deleteshitai = "ON"
	TalkConfig
}

Select.deleteoff
{
	deleteshitai = "OFF"
	TalkConfig
}





//--Talk Rate
//This is when the user chooses to adjust the talk rate in the config menu. The talk rate is how often the ghost will read some dialogue from aitalk.dic.

Select.talkinter
 {
 	"\0\s[0]\_v[trill.wav]\b2How often should I speak?\w8 The interval is currently set to %(talktime).\0\n\n[half]/
 	\![*]\q[Every 30 seconds,TALKMAX]\n/
	\![*]\q[Every minute,TALKHIGH]\n/
 	\![*]\q[Every 3 minutes,TALKNORMAL]\n/
	\![*]\q[Every 5 minutes,TALKPOOR]\n/
 	\![*]\q[Do not speak,TALKNONE]\n\n[half]/
	\![*]\q[Do not change,TalksTill]\e"
}

Select.TalksTill
{
	"\0\s[0]\_v[trill.wav]No change then...\e"
}

//If the user chooses every 30 seconds.
Select.TALKMAX
{
 	talktime = "every 30 seconds" //this sets up the envelope properly
	aitalkinterval = 45 //this changes the actual rate	
 	"\0\s[0]\_v[trill.wav]I will speak %(talktime).\e"
}

//If the user chooses every minute.
Select.TALKHIGH
{
	talktime = "every minute"
	aitalkinterval = 90
	
	"\0\s[0]\_v[trill.wav]I will speak %(talktime).\e"
}

//If the user chooses every three minutes.
Select.TALKNORMAL
{
	talktime = "every 3 minutes"
	aitalkinterval = 270
		
	"\0\s[0]\_v[trill.wav]I will speak %(talktime).\e"
}

//If the user chooses every five minutes. 
Select.TALKPOOR
{
	talktime = "every 5 minutes"
	aitalkinterval = 400
		
	"\0\s[0]\_v[trill.wav]I will speak %(talktime).\e"
}

//If the user chooses to not have them speak. This is one case where you MIGHT want to make talktime equal something else, if you have a snappier way of saying the ghost won't talk. Make sure it flows well in your menus though, since it will be displayed in your config menu.
Select.TALKNONE
{
	talktime = "... an indefinite interval because you don't want me talking."
	aitalkinterval = 0
		
	"\0\s[0]\_v[trill.wav]...\e"
}


	
//If the user selects cancel in a menu. Replace as you like, or just leave them blank.
Select.CANCEL
{
	"\0\s[0]\_v[trill.wav]Nevermind then...\e"
		
}

	
//Functions menu

Select.dosomething
{
	"\0\s[0]\_v[trill.wav]\b2What would you like me to do?\n\n"
 		
	--
	"\![*]\q[Open Calendar,CALENDAR]\n/
	\![*]\q[Check Email,MailCheck]\n/
	\![*]\q[Open SSP Preferences,sspconfig]\n/
	\![*]\q[Empty Recycle Bin,ChoiceGarbagecan]\n/
	\![*]\q[System Information,ChoiceSystemInformation]\n/
	\![*]\q[Test variable,testvariable]\n\n/
	\![*]\q[Back to main menu,BACKTOMENU]\e"
}
//adding testing to main ghost
Select.testvariable
{
	"\0\s[0]\_v[trill.wav]Testing!\e"
}
//When the user clicks Open Calender. This will open the calender function of SSP, an in-built feature that you don't have to worry about in the least.
Select.CALENDAR
{
	"\0\s[0]\_v[trill.wav]Opening the calender.\![open,calendar]\e"
}

//When the user chooses SSP preferences. This will open the same window that shows up if you right click your ghost and go to Utilities - Preferences.
Select.sspconfig
{
	"\0\s[0]\_v[trill.wav]Opening the SSP config menu.\![open,configurationdialog]\e"
}

//If the user chooses to empty the recycle bin.
Select.ChoiceGarbagecan
{
	_gomicheck = FUNCTIONEX("gomi.dll", "-n")	
	
	if _gomicheck == 0 //If the recycle bin is empty.
	{
		"\0\s[0]\_v[trill.wav]Let me check that...\w8\s[-1]\w8\w8\w8\w8\w8\s[0]\_v[trill.wav]\cIt was empty.\e"
		
	}
	elseif _gomicheck >= 1 //If the recycle bin is full.
	{
		"\0\s[0]\_v[trill.wav]Emptying the recycle bin.\w8\w8\s[-1]\w8\w8\w8\w8\w8\![raise,OnGarbagecanEmpty]\w9\w9\w9\s[0]\_v[trill.wav]\cDone.\e"
		
		
	}
}


//This is for the SAORI, don't touch it.
OnGarbagecanEmpty
{
	_gomi = FUNCTIONEX("gomi.dll", "-f")
}

//This is when the user chooses System Information. 
Select.ChoiceSystemInformation
{
	os_name = FUNCTIONEX("saori_cpuid.dll","os.name")
	os_version = FUNCTIONEX("saori_cpuid.dll","os.version")
	cpu_name = FUNCTIONEX("saori_cpuid.dll","cpu.name")
	cpu_clockex = FUNCTIONEX("saori_cpuid.dll","cpu.clockex")
	"/
	\0\s[0]\_v[trill.wav]\b[2]/
	\_q\f[bold,1]OS:\f[bold,0] %(os_name) %(os_version)\n/
	\f[bold,1]Memory Load:\f[bold,0] %(memoryload)%\n/
	\f[bold,1]Physical Memory:\f[bold,0] %(memoryavailphys) KB\n/
	\f[bold,1]CPU:\f[bold,0] %(cpu_name) %(cpu_clockex)MHz\n/
	\f[bold,1]Ukagaka:\f[bold,0] %property[baseware.version]/
	\e"
}
	
//This is when the user chooses to check their email. The rest of this function plays out in etc.dic. 
Select.MailCheck
{
	"\![biff]\e"
}


//This is when the user ends their headline session. 
Select.HEADLINECANCEL
{
	"\0\s[0]\_v[trill.wav]Finished with headlines.\e"
}

	
//---- OnChoiceTimeout --------
//If the user is given a menu with choices, but doesn't pick one of the choices, it will eventually time out. At that point, they will say this dialogue. Replace with whatever you like, or leave it blank.

OnChoiceTimeout
{
	"\0\s[0]\_v[trill.wav]Nevermind, then.\e"
}

 
//---- Secondary Character Menu --------
//This section has to do with the menu for the second character. If you don't want your second character to have a menu, you can just delete this whole chunk.

OpenKeroMenu
{
	"\1\s[10]\b[2]"
	--
	"There is no menu in the void."
  	--
	"\n\n[half]/
	\![*]\q[Update,keroupdatecheck]\n/
 	\![*]\q[Bug report,bugreport]\n\n/
	\![*]\q[Test variable,testvariable]\n\n/
	
	\![*]\q[Nothing,keroCANCEL]\e"
}


Select.keroCANCEL
{
	"\1\s[10]Everything is empiness.\e"
}


//This is when they select bug report. 
Select.bugreport
{
	"\0\s[0]\_v[trill.wav]Have you found something troubling? \w5Report bugs to era@outworlderaffairs.com. \w5I was downloaded from \_a[http://theoutworlder.tumblr.com\_a.\e"
}

//When clicked, this will automatically tell the ghost to check for updates. More detail on updates in etc.dic. You can leave this alone.
Select.keroupdatecheck
{
	"\1\s[10]\![updatebymyself]\e"
}

//--Test Variable --------------------

