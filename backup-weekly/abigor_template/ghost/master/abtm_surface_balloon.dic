/* ############# Surface and Location Functions ############# */
// ----- SHIORI RESOURCE -----
// Like their corresponding settings in descript.txt, except they actually WORK. maybe.

// On_sakura.defaultx{0}
// On_sakura.defaulty{0}
// On_sakura.defaultleft{100}
// On_sakura.defaulttop{100}


// On_kero.defaultx{500}
// On_kero.defaulty{300}
// On_kero.defaultleft{200}
// On_kero.defaulttop{200}



// On_char2.defaultx{1000}
// On_char2.defaulty{600}
// On_char2.defaultleft{300}
// On_char2.defaulttop{300}


/* #############  Overlap, Offscreen ############# */

// These fuctions use the character with byte value 1 as a delimiter.
// In both UTF-8 and Shift_JIS encoding, this is the Start of Heading glyph, .
// YAYA has a function AUTO_TYPE_CONVERT which converts them to commas as in the examples below


// ----- OnOverlap -----

// ┌───────┬──────────────────────────────────────────────────────────┐
// │ ref # │ Reference Contents                                       │
// ╞═══════╪══════════════════════════════════════════════════════════╡
// │ 0     │ Overlapping character/surface pairs by scope ID: "ID-ID" │
// │       │ Where multiple characters overlap, pairs are separated   │
// │       │ by the character at byte value 1.                        │
// │       │ "ID-ID[\1]ID-ID"                                         │
// │       │ e.g. "0-1,0-2,1-2"                                       │
// │       │                                                          │
// │ 1     │ In the same format as reference0:                        │
// │       │ The previous state before the event ran                  │
// └───────┴──────────────────────────────────────────────────────────┘

OnOverlap
{
	"%(REFTEST('OnOverlap'))"	
}


// ----- OnOtherOverlap -----
// Global detection within a baseware instance

// ┌───────┬───────────────────────────────────────────────────────────────────────┐
// │ ref # │ Reference Contents                                                    │
// ╞═══════╪═══════════════════════════════════════════════════════════════════════╡
// │ 0     │ Overlapping pairs by sakura name and scope ID: "sakura/ID-sakura/ID"  │
// │       │ Where multiple characters overlap, pairs are separated                │
// │       │ by the character at byte value 1.                                     │
// │       │ "sakura/ID-sakura/ID[\1]sakura/ID-sakura/ID"                          │
// │       │ e.g. "Abigor/0-Abigor/1,Abigor/0-f_lowe_y/0,Abigor/2-statusBOT/0"     │
// │       │                                                                       │
// │ 1     │ In the same format as reference0:                                     │
// │       │ The previous state before the event ran                               │
// └───────┴───────────────────────────────────────────────────────────────────────┘


OnOtherOverlap
{
	"%(REFTEST('OnOtherOverlap'))"
}
// ----- OnOffscreen-----

// ┌───────┬─────────────────────────────────────────────────────────────────┐
// │ ref # │ Reference Contents                                              │
// ╞═══════╪═════════════════════════════════════════════════════════════════╡
// │ 0     │ Offscreen character/surface by scope ID: "ID"                   │
// │       │ When multiple surfaces are offscreen, they are separated by the │
// │       │ character at byte value 1.                                      │
// │       │ "ID[\1]ID"                                                      │
// │       │ e.g. "0,1,2"                                                    │
// │       │                                                                 │
// │ 1     │ In the same format as reference0:                               │
// │       │ The previous state before the event ran                         │
// └───────┴─────────────────────────────────────────────────────────────────┘

OnOffscreen
{
	if  "0" !_in_ TOSTR(reference0)
	{
		offscreenflag[0] = ""
	}
	elseif "0" _in_ TOSTR(reference0) && offscreenflag[0] != "0"
	{
		offscreenflag[0] = "0"
	}
	--
	if  "1" !_in_ TOSTR(reference0)
	{
		offscreenflag[1] = ""	
	}
	elseif "1" _in_ TOSTR(reference0) && offscreenflag[1] != "1"
	{
		offscreenflag[1] = "1"
	}
	--
	if  "2" !_in_ TOSTR(reference0)
	{
		offscreenflag[2] = ""	
	}
	elseif "2" _in_ TOSTR(reference0) && offscreenflag[2] != "2"
	{
		offscreenflag[2] = "2"
	}
	--
	OnOffscreenTalk
}

// ----- OnOffscreenTalk -----
// User Added -- Era

OnOffscreenTalk : nonoverlap_pool
{
	if offscreenflag[0] == "0"
	{
		"\0I've been moved off screen. Drag me back in or give focus to the ghost window and press CTRL+SHIFT+F12 to return us all to our default positions."
	}
	if offscreenflag[1] == "1"
	{
		"\1* A muffled clanking sounds *"
		--
		"\0How did my mount get off screen? \n[200]Drag them back in or give focus to the ghost window and press CTRL+SHIFT+F12 to return us all to our default positions."
	}
	if offscreenflag[2] == "2"
	{
		"\p[2]* There is a rustling of papers *"
		--
		"\0Did the wind blow that manuscript off screen? \n[200]Drag it back over here or give focus to the ghost window and press CTRL+SHIFT+F12 to return us all to our default positions."
	}
}

// ----- OnOtherOffscreen -----
// Global detection within a baseware instance

// ┌───────┬─────────────────────────────────────────────────────────────────┐
// │ ref # │ Reference Contents                                              │
// ╞═══════╪═════════════════════════════════════════════════════════════════╡
// │ 0     │ Offscreen characters by sakura name and scope ID: "sakura/ID"   │
// │       │ When multiple surfaces are offscreen, they are separated by the │
// │       │ character at byte value 1.                                      │
// │       │ "sakura/ID[\1]sakura/ID"                                        │
// │       │ e.g. "Abigor/3,f_lowe_y/0,statusBOT/0"                          │
// │       │                                                                 │
// │ 1     │ In the same format as reference0:                               │
// │       │ The previous state before the event ran                         │
// └───────┴─────────────────────────────────────────────────────────────────┘

OnOtherOffscreen
{
	// "%(REFTEST('OnOtherOffscreen'))"
}

// ----- OnSurfaceRestore -----

// ┌───────┬────────────────────────────────┐
// │ ref # │ Reference Contents             │
// ╞═══════╪════════════════════════════════╡
// │ 0     │ The current surface of scope 1 │
// │       │                                │
// │ 1     │ The current surface of scope 2 │
// └───────┴────────────────────────────────┘

OnSurfaceRestore
{
	"\0\s[0]\1\s[10]\p[2]\s[30]"
}


// ----- OnSurfaceChange -----
// NOTIFY Event

// ┌───────┬─────────────────────────────────────────┐
// │ ref # │ Reference Contents                      │
// ╞═══════╪═════════════════════════════════════════╡
// │ 0     │ The current surface of scope 1          │
// │       │                                         │
// │ 1     │ The current surface of scope 2          │
// │       │                                         │
// │ 2     │ scope ID, surface number, width, height │
// │       │ e.g. "0,3,150,200"                      │
// └───────┴─────────────────────────────────────────┘
OnSurfaceChange
{
	// "%(REFTEST('OnSurfaceChange'))"
}


// ----- OnOtherSurfaceChange -----

// ┌───────┬──────────────────────────────────────┐
// │ ref # │ Reference Contents                   │
// ╞═══════╪══════════════════════════════════════╡
// │ 0     │ Ghost name                           │
// │       │                                      │
// │ 1     │ Ghost sakura/scope0 name             │
// │       │                                      │
// │ 2     │ Scope ID where surface was changed   │
// │       │                                      │
// │ 3     │ New surface ID                       │
// │       │                                      │
// │ 4     │ Old surface ID                       │
// │       │                                      │
// │ 5     │ New surface dimensions, width,height │
// │       │ e.g. "325,400"                       │
// └───────┴──────────────────────────────────────┘

OnOtherSurfaceChange
{
	// "%(REFTEST('OnOtherSurfaceChange'))"
}


// ----- OnShellChanged -----
// Occurs after shell change complete

// ┌───────┬────────────────────┐
// │ ref # │ Reference Contents │
// ╞═══════╪════════════════════╡
// │ 0     │ Current Shell name │
// │       │                    │
// │ 1     │ Current ghost name │
// │       │                    │
// │ 2     │ Current shell path │
// └───────┴────────────────────┘

OnShellChanged
{
	// "%(errorMsg)\_w[500]\e"
}


// ----- OnShellChanging -----

// ┌───────┬─────────────────────────────────┐
// │ ref # │ Reference Contents              │
// ╞═══════╪═════════════════════════════════╡
// │ 0     │ Shell name being switched to    │
// │       │                                 │
// │ 1     │ Name of shell before switching  │
// │       │                                 │
// │ 2     │ Path of shell being switched to │
// └───────┴─────────────────────────────────┘

OnShellChanging
{
	// "%(errorMsg)\_w[500]\e"
}


// ----- OnShellScaling -----

// ┌───────┬─────────────────────────────────────┐
// │ ref # │ Reference Contents                  │
// ╞═══════╪═════════════════════════════════════╡
// │ 0     │ NEW Horizontal (X) scale percentage │
// │       │                                     │
// │ 1     │ OLD Horizontal (X) scale percentage │
// │       │                                     │
// │ 2     │ NEW Vertical (Y) scale percentage   │
// │       │                                     │
// │ 3     │ OLD Vertical (Y) scale percentage   │
// └───────┴─────────────────────────────────────┘

OnShellScaling
{
	// "%(REFTEST('OnShellScaling'))"
}


// ----- OnDressupChanged -----

// ┌───────┬─────────────────────────────────────┐
// │ ref # │ Reference Contents                  │
// ╞═══════╪═════════════════════════════════════╡
// │ 0     │ (SCOPEID?) to be changed            │
// │       │                                     │
// │ 1     │ Part name                           │
// │       │                                     │
// │ 2     │ Are dress-ups enabled:              │
// │       │ When disabled, "0"                  │
// │       │ When enabled, "1"                   │
// │       │                                     │
// │ 3     │ Part group name                     │
// │       │                                     │
// │ 4     │ Source:                             │
// │       │ When executed from script, "script" │
// │       │ When excecuted from menu, "user"    │
// └───────┴─────────────────────────────────────┘

OnDressupChanged
{
	"%(errorMsg)\_w[500]\e"
}



/* ############# Balloon Functions ############# */


// ----- OnBalloonChange -----

// ┌───────┬─────────────────────────────┐
// │ ref # │ Reference Contents          │
// ╞═══════╪═════════════════════════════╡
// │ 0     │ Name of balloon switched to │
// │       │                             │
// │ 1     │ Path of balloon switched to │
// └───────┴─────────────────────────────┘

OnBalloonChange
{
	// "%(REFTEST('OnBalloonChange'))"
	// "Maybe this will look better. \_w[500]"
}


// ----- OnBalloonBreak -----

// ┌───────┬─────────────────────────────────────────────────────────────┐
// │ ref # │ Reference Contents                                          │
// ╞═══════╪═════════════════════════════════════════════════════════════╡
// │ 0     │ Script where the interruption occurred                      │
// │       │                                                             │
// │ 1     │ Scope ID number of the interrupted balloon                  │
// │       │                                                             │
// │ 2     │ Break position                                              │
// │       │ Expressed as number of characters from beginning of script, │
// │       │ including all Sakura Script tags                            │
// └───────┴─────────────────────────────────────────────────────────────┘

OnBalloonBreak
{
	// "%(REFTEST('OnBalloonBreak'))"
}


// ----- OnBalloonClose -----
// Be very careful of using or ghost will not be able to close

// ┌───────┬────────────────────────────────────────┐
// │ ref # │ Reference Contents                     │
// ╞═══════╪════════════════════════════════════════╡
// │ 0     │ Script that was displayed when closing │
// └───────┴────────────────────────────────────────┘

OnBalloonClose
{
	
	// "%(REFTEST('OnBalloonClose'))"
}


// ----- OnBalloonTimeout -----

// ┌───────┬──────────────────────────────────────────┐
// │ ref # │ Reference Contents                       │
// ╞═══════╪══════════════════════════════════════════╡
// │ 0     │ Script that was displayed when timed out │
// │       │                                          │
// │ 1     │ Time remaining                           │
// └───────┴──────────────────────────────────────────┘

OnBalloonTimeout
{
	// "%(REFTEST('OnBalloonTimeout'))"
}


// ----- OnBalloonScaling -----

// ┌───────┬─────────────────────────────────────┐
// │ ref # │ Reference Contents                  │
// ╞═══════╪═════════════════════════════════════╡
// │ 0     │ NEW Horizontal (X) scale percentage │
// │       │                                     │
// │ 1     │ OLD Horizontal (X) scale percentage │
// │       │                                     │
// │ 2     │ NEW Vertical (Y) scale percentage   │
// │       │                                     │
// │ 3     │ OLD Vertical (Y) scale percentage   │
// └───────┴─────────────────────────────────────┘

OnBalloonScaling
{
	// "%(REFTEST('OnBalloonScaling'))"
}


// ----- OnTrayBalloonClick & OnTrayBalloonTimeout -----

// ┌───────┬────────────────────┐
// │ ref # │ Reference Contents │
// ╞═══════╪════════════════════╡
// │ 0     │ Title String       │
// │       │                    │
// │ 1     │ Display text       │
// └───────┴────────────────────┘

OnTrayBalloonClick
{
	// "%(REFTEST('OnTrayBalloonClick'))"
}

OnTrayBalloonTimeout
{
	// "%(REFTEST('OnTrayBalloonTimeout'))"
}

