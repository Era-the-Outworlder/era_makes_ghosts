//	                   __  __
//	                 ,',.\/,.`.
//	                 \(_,''._)/
//	                 ._(.||.)_,		                             
//	                 (,>(__)<.)		   _____                     
//	                 '`-.==,-'`		  |     | ___  _ _  ___  ___ 
//	                     )(_		  | | | || . || | ||_ -|| -_|
//	            _____ _.'   `-.		  |_|_|_||___||___||___||___|
//	       _.-''    ,','|    \.\
//	    ,-'         `-.`:  .  :\\_
//	   /,::::, ,::::, ,>))._ ,' `'`
//	  // ::::/ /::::/ /    )'/.
//	 // ::::/ /::::/ /   ,',|`.\
//	/______________/   /,'||'|))
//	\ _ _ __ _ _ _ \,':(_ |('((__
//	 \___(,.)SSt____\,|_)))_))`--`
//	     /,'


/* ############# Mouse Functions ############# */
// Here are the SHIORI Functions related to interacting with the ghost via mouse. Clicking, dragging, swiping, here it is.

// Reference Chart for Most Mouse Functions

// ┌───────┬────────────────────────────────────────────────────────────┐
// │ ref # │                Reference Contents                          │
// ╞═══════╪════════════════════════════════════════════════════════════╡
// │ 0     │ local X coordinate of mouse cursor                         │
// │       │                                                            │
// │ 1     │ local Y coordinate of mouse cursor                         │
// │       │                                                            │
// │ 2     │ always "0" ----- EXCEPT FOR:                               │
// │       │ OnMouseWheel, OnMouseDragStart, OnMouseDragEnd:            │
// │       │ The amount of rotation of the mouse wheel.                 │
// │       │ Positive forward/up, negative backward /down               │
// │       │                                                            │
// │ 3     │ scope of surface (0 for sakura, 1 for kero, etc)           │
// │       │                                                            │
// │ 4     │ surface collision name/identifier                          │
// │       │                                                            │
// │ 5     │ Mouse Button Identifier:                                   │
// │       │ "0" for leftmouse, "1" for rightmouse, "2" for middlemouse │
// │       │ for OnMouseDragStart/End, only left and right              │
// │       │                                                            │
// │ 5     │ FOR "EX" FUNCTIONS:                                        │
// │       │ "middle" for middlemouse / mouse wheel. Has Priority       │
// │       │ "xbutton1" for extended button 1,                          │
// │       │ "xbutton2" for extended button 2                           │
// │       │                                                            │
// │ 5     │ FOR FUNCTIONS NOT TRIGGERED BY CLICK:                      │
// │       │ always "0"                                                 │
// │       │                                                            │
// │ 6     │ Windows 7+ Input Source: "mouse" for mouse input,          │
// │       │ "touch" for touch panel of multi-touch environment         │
// │       │                                                            │
// │ 7     │ OnMouseMultipleClick and OnMouseMultipleClickEx Only:      │
// │       │ Number of Consecutive Clicks                               │
// └───────┴────────────────────────────────────────────────────────────┘

// All OnMouse events are technically optional, but if your ghost is going to have a menu when clicked on, OnMouseClick or OnMouseDoubleClick is recommended. 

// All events are included for completeness. Unused events can (and perhaps should) be deleted. 

// The example code in OnClick0/OnClick1/OnClick2 uses OnMouseDoubleClick, OnMouseDragStart, OnMouseDragEnd and OnMouseWheel.

// The example code in OnMouse0/OnMouse1/OnMouse2 uses OnMouseMove and OnMouseHover.

// The contents of the events below can be removed if you prefer not to use the scope detection/selector at all and instead prefer to write new code directly in the function.


/* ############# OnMouseUp && OnMouseUpEx ############# */

// Called when the Mouse Buttons are released. Highest Priority

OnMouseUp
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseUp')"
	EVAL(_toRun)
}

OnMouseUpEx
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseUpEx')"
	EVAL(_toRun)
}

/* ############# OnMouseDown && OnMouseDownEx ############# */

// Called when the Mouse Buttons are pressed down. Highest Priority

OnMouseDown
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseDown')"
	EVAL(_toRun)
}

OnMouseDownEx
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseDownEx')"
	EVAL(_toRun)
}

/* ############# OnMouseClick && OnMouseClickEx ############# */

// Called on release when the mouse is clicked, only if there is no response from OnMouseUp or OnMouseUpEx

OnMouseClick
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseClick')"
	EVAL(_toRun)
}

OnMouseClickEx
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseClickEx')"
	EVAL(_toRun)
}

/* ############# OnMouseDoubleClick && OnMouseDoubleClickEx ############# */

// Called when the mouse is double-clicked if there is no response from OnMouseUp or OnMouseUpEx-- Will BREAK/interrupt OnMouseClick or OnMouseClickEx.


OnMouseDoubleClick
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseDoubleClick')"
	EVAL(_toRun)
}

OnMouseDoubleClickEx
{
	LOGGING("Double EX")
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseDoubleClickEx')"
	EVAL(_toRun)
}


/* ############# OnMouseMultipleClick && OnMouseMultipleClickEx ############# */

// Called when the mouse is clicked multiple times, only if there is no response from OnMouseUp or OnMouseUpEx-- Will BREAK/interrupt OnMouseDoubleClick or OnMouseDoubleClickEx. EX takes priority for Middle/Wheel.

OnMouseMultipleClick
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseMultipleClick')"
	EVAL(_toRun)
}

OnMouseMultipleClickEx
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseMultipleClickEx')"
	EVAL(_toRun)
}

/* ############# OnMouseWheel ############# */

// ----- OnMouseWheel -----
// When the wheel of a mouse moves

OnMouseWheel
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseWheel')"
	EVAL(_toRun)
}

/* ############# OnMouseDragStart && OnMouseDragEnd ############# */

// ----- OnMouseDragStart -----
// When dragging of ghost starts

OnMouseDragStart
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseDragStart')"
	EVAL(_toRun)
}

// ----- OnMouseDragEnd -----
// When dragging of ghost ends.
OnMouseDragEnd
{
	_toRun = "OnClick"+TOSTR(reference3)+"('OnMouseDragEnd')"
	EVAL(_toRun)
}


/* ############# OnMouseMove, OnMouseEnter, OnMouseLeave, OnMouseHover ############# */

// In order of Priority:
// OnMouseMove -> OnMouseEnter - OnMouseLeave -> OnMouseEnterAll - OnMouseLeaveAll
// OnMouseHover only seems to trigger if OnMouseMove does not return

// ----- OnMouseMove -----
OnMouseMove
{
	_toRun = "OnMove"+TOSTR(reference3)+"('OnMouseMove')"
	EVAL(_toRun)
}

// ----- OnMouseEnter -----
// When the mouse enters any collision area of the ghost. Takes Priority over OnMouseEnterAll
OnMouseEnter
{
	_toRun = "OnMove"+TOSTR(reference3)+"('OnMouseEnter')"
	EVAL(_toRun)
}

//-------- OnMouseLeave -----
// When the mouse leaves any collision area of the ghost. Takes Priority over OnMouseLeaveAll

OnMouseLeave
{
	_toRun = "OnMove"+TOSTR(reference3)+"('OnMouseLeave')"
	EVAL(_toRun)
}

// ----- OnMouseEnterAll -----
// When the mouse enters the outermost boundary of the ghost. Does not trigger by changing collision areas
OnMouseEnterAll
{
	_toRun = "OnMove"+TOSTR(reference3)+"('OnMouseEnterAll')"
	EVAL(_toRun)
}

// ----- OnMouseLeaveAll -----
// When the mouse leaves the outermost boundary of the ghost. Does not trigger by changing collision areas.
OnMouseLeaveAll
{
	_toRun = "OnMove"+TOSTR(reference3)+"('OnMouseLeaveAll')"
	EVAL(_toRun)
}


// ----- OnMouseHover -----
// When mouse cursor is stationary. Seems to only be called if Reference4 is NOT empty, aka if the mouse cursor is on a surface has a declared collision.

OnMouseHover
{
	_toRun = "OnMove"+TOSTR(reference3)+"('OnMouseHover')"
	EVAL(_toRun)
}

/* ############# OnMouseGesture ############# */

// Occurs when the mouse is right-dragged. Supposedly should also trigger when wheel-click-dragged, but have not seen that to function. 
// Per UKADOC:
// "Since SSP 2.3.53, if SHIORI does not return anything (204 No Content is returned) for something where Reference 5 of OnMouseGesture is up or down in the touch panel environment, OnMouseWheel will occur as an alternative event. See the On Mouse Wheel section for details."
// However I have not been able to test that, as I am not working on a touch device

// ┌───────┬───────────────────────────────────────────────────────────────────────────┐
// │ ref # │                                Reference Contents                         │
// ╞═══════╪═══════════════════════════════════════════════════════════════════════════╡
// │ 0     │ scope of surface (0 for sakura, 1 for kero, etc)                          │
// │       │                                                                           │
// │ 1     │ Mouse cursor XY coordinates                                               │
// │       │ (byte value 1 delimited)                                                  │
// │       │                                                                           │
// │ 2     │ surface collision name/identifier                                         │
// │       │                                                                           │
// │ 3     │ Mouse cursor XY coordinates that started right dragging                   │
// │       │ (1 byte value delimited                                                   │
// │       │                                                                           │
// │ 4     │ surface collision name/identifier of right-drag start                     │
// │       │                                                                           │
// │ 5     │ Gesture direction:                                                        │
// │       │ "left_up" to upper lefft, "up" upwards, "right_up" to upper right         │
// │       │ "left" to left, "right" to right                                          │
// │       │ "left_down" to lower left, "down" downwards, "right_down" to lower right  │
// │       │ "circle.cw" clockwise, "circle.ccw" counterclockwise                      │
// │       │ "end" release of button                                                   │
// │       │                                                                           │
// │ 6     │ Gesture movement angle:                                                   │
// │       │ From 0 degrees to the right, counterclockwise 360 degrees.                │
// └───────┴───────────────────────────────────────────────────────────────────────────┘

OnMouseGesture
{
	// if reference5!= "end"
	// {"%(REFTEST('OnMouseGesture'))"}
}



/* ############# Click and Move Utilities ############# */
// These are where the actual magic happens, and therefore where the dialogues go.

/* ############# OnClick0 ############# */
// When the sakura/scope0 character is clicked on, dragged, or flicked with the mouse wheel.

OnClick0
{
	// Name sent by the Event that called OnClick
	_source = _argv[0]
	
	// If a hitbox is clicked, the name of the collision. Empty otherwise.
	_hitbox = reference4 
	
	// 0 for left, 1 for right, "middle" for middle mouse/mousewheel, "xbutton1" for extended button 1, "xbutton2" for extended button 2
	_button = reference5

	// 1 is the right mouse button. This makes it so that this code doesn't activate with that button, and instead the r-click/user draw menu will play.
	if _button != 1 
    {
		// If the click DID NOT occur in the bounds of a hitbox
		if !_hitbox
		{
			if _source == "OnMouseDoubleClick" || _source == "OnMouseDoubleClickEx"
			{
				if _button == "xbutton1"
				{
					"%(REFTEST('NewClickFunction'))"
				}
				else
				{
					OnMenu("click0","main")
					
				}
			}
			elseif _source == "OnMouseDragStart"
			{
				"Put me down! I'm the main character!"
			}
			elseif _source == "OnMouseDragEnd"
			{
				"About time..."
			}
		}
		
		if _hitbox == "Box1"
		{
			if _source == "OnMouseWheel"
			{
				"Test..."
			}
		}
		
		if _hitbox == "Box2"
		{
			if _source == "OnMouseWheel"
			{
				"Test..."
			}
		}
		
		if _hitbox == "Box3"
		{
			if _source == "OnMouseWheel"
			{
				"Test..."
			}
		}
		
	}
}


/* ############# OnMouseClickKERO ############# */
OnClick1
{
	_source = _argv[0]
	_hitbox = reference4
	_button = reference5

	if _button != 1 
    {
		// If the click DID NOT occur in the bounds of a hitbox
		if !_hitbox
		{
			if _source == "OnMouseDoubleClick" || _source == "OnMouseDoubleClickEx"
			{
				if _button == "xbutton1"
				{
					"%(REFTEST('NewClickFunction'))"
				}
				else
				{
					// lastSource = "click0"
					--
					OnMenu("click1","main")
					
				}
			}
			elseif _source == "OnMouseDragStart"
			{
				"*it wriggles slightly, demanding to be let down*"
			}
			elseif _source == "OnMouseDragEnd"
			{
				"*the sabaton give a desultory rattle*"
			}
		}
		
		if _hitbox == "Box1"
		{
			if _source == "OnMouseWheel"
			{
				"*clonk*"
			}
		}
		
		if _hitbox == "Box2"
		{
			if _source == "OnMouseWheel"
			{
				"*clank*"
			}
		}
		
		if _hitbox == "Box3"
		{
			if _source == "OnMouseWheel"
			{
				"*clink*"
			}
		}
		
	}
}

/* ############# OnMouseClickCHAR ############# */
OnClick2
{
	_source = _argv[0]
	_hitbox = reference4
	_button = reference5

	
}



/* ############# OnMoveSCOPE ############# */

OnMove0
{
	_source = _argv[0]
	_hitbox = "%(reference4)"

	case _source
	{
		when "OnMouseMove"
		{
			case _hitbox 
			{
				when "Box1"
				{
					stroke++
					_div = stroke%13
					if _div == 0
					{"Body: %(stroke)"}
				}
				when "Box2" 
				{
					smack++
					_div = smack%13
					if _div == 0
					{"Face: %(smack)"}
				}
				when "Box3"
				{
					touch++
					_div = touch%13
					if _div == 0
					{"Others: %(touch)"}
				}
			}
		}
		when "OnMouseHover"
		{
			// Call OnSecondChange with arguments for a counter
		}
		when "OnMouseLeaveAll"
		{
			stroke = 0
			smack = 0
			touch = 0
		}
		others
		{}
	}
}

OnMove1
{
	
}

OnMove2
{

}