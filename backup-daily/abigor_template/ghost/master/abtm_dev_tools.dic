//       _                _                  _      
//    __| |  ___ __   __ | |_   ___    ___  | | ___ 
//   / _` | / _ \\ \ / / | __| / _ \  / _ \ | |/ __|
//  | (_| ||  __/ \ V /  | |_ | (_) || (_) || |\__ \
//   \__,_| \___|  \_/    \__| \___/  \___/ |_||___/
//                                                  

// DEV TOOLS FUCK YEAH
// ------ This is a whole bunch of testing stuff shhhhh ------
// ----- An Important Tool
//		LOGGING("What Am I Doing Here")



OnTestVariable
{
	"\0\b6Testing! \n[200]"
	--
	"\![*] \q[EVAL ANYTHING,OnTestSelect,doEVAL]\n"
	--
	'\![*] \q[Empty array?,"script: \![open,inputbox,OnTestSelect,--reference=emptyARRAY]Input the name of the array you wish to empty."]\n'
	--
	"\![*] \q[Set commRatio,OnTestSelect,setCOMM]\n"
	--
	"\![*] \q[Test OnFirstBoot?,OnTestSelect,newBoot0]\n"
	--
	"\![*] \q[Test Second OnFirstBoot?,OnTestSelect,newBoot1]\n"
	--
	"\![*] \q[Test Display?,OnDisplayTestMenu]\n"
	--
	"\![*] \q[Test preset function?,OnTestSelect,testFunk]\n"
	--
	'\![*] \q[Test specific function?,"script: \![open,inputbox,OnTestSelect,--reference=funkTest]Input the name of the function wyou wish to test."]\n'
	
	
	// "%(ellVee)"
	// "%(year) %(month) %(day) %(weekday) %(hour) %(ampm) %(hour12) %(minute) %(second)\e"
	
}

OnTestSelect
{
	case reference0
	{
		when "doEVAL"
		{
			"\![open,input,OnEVAL,]"
		}
		when "setCOMM"
		{
			"\![open,sliderinput,OnCOMMRATE,,%(communicateratio),0,100]"
		}
		when "newBoot0"
		{
			"\![raise,OnFirstBoot,0]"
		}
		when "newBoot1"
		{
			"\![raise,OnFirstBoot,1]"
		}
		when "testFunk"
		{
			ASEARCH('forkchain',hourlyArray)
			// TextAlignTest
			// DUMPVAR()
			// \n[200]\nDumping Variables to ayame.log.\n"
			
			// --
			// foreach ghostexlist; _ref
			// {
				// _display += "%(_ref)\n"
				// _num ++
			// } 
			// --
			
			// "%(_display)\x"
			
			
			// "\![open,teachbox]Teachbox\x\n/
			// \![open,communicatebox]Communicatebox\x\n/
			// "\![open,inputbox,OnTestInput,--reference=a,--reference=b,--reference=c]Inputbox\x\n"
			// \![open,passwordinput,OnTestInput]Passwordbox\x\n/
			// \![open,dateinput,OnTestInput,,1900,1,1]Dateinput\x\n/
			// \![open,sliderinput,OnTestInput,,1,1,21]Sliderinput\x\n/
			// "\![open,timeinput,OnTestInput,empty,22,30,00,--reference=Time Input Test]Enter time in 24-hour format:\x"
		}
		others
		{
			if reference2 == "funkTest"
			{
				EVAL(reference0)
			}
			elseif reference2 == "emptyARRAY"
			{
				_dummyarrayname = reference0
				_dummyarray = EVAL(reference0)
				_display = ""
				_num = 0
				foreach _dummyarray; _ref //Each time the loop runs, _ref will store the next value in the array, until the array ends
				{
					_ref = SHIORI3FW.EscapeAllTags(_ref)
					_display += "\n%(_num)- %(_ref) Deleted"
					
					// hourlyArray[_num] = ""
					
					EVAL('ERASEVAR('+_dummyarrayname+'[_num])')
					
					
					_num ++
				}
				--
				"\_q\b2\![set,autoscroll,disable]%(_display)\x"
			}
		}
	}
}

OnEVAL1
{
	EVAL(reference0)
}

OnCOMMRATE
{
	communicateratio = reference0
}

TextAlignTest
{
	// _lines = "%property[currentghost.balloon.scope(0).lines]"
	// _lines = TOINT(_lines)
	// if % _lines {_center = }
	// _center = 
	
	// Maximum number of rows that can fit in the current balloon. Shows the entire drawing range regardless of basepos. Matches the number of lines displayed after scrolling.


	// _dispLines = "%property[currentghost.balloon.scope(0).lines.initial]"
	
	
	// Maximum number of rows that can fit in the current balloon. basepos.y = Considering the character start point. Matches the number of lines displayed before scrolling.

	// "%(_lines) / %(_dispLines)"
}


// ----------------

reqCheck
{   
    _display = ""
    _sz = ARRAYSIZE(var.req.key)
    for _i = 0; _i < _sz; _i++ 
    {
        _keyname = var.req.key[_i]
        _value = var.req.value[_i]
        _display += "%(_keyname): %(_value)\n[150]"
    }
    --
    "\_q\b6\![set,autoscroll,disable]%(_display)\x"
}

REFTEST
{
	_caller = _argv[0]
	_display = ""
	_num = 0
	foreach reference; _ref //Each time the loop runs, _ref will store the next value in the array, until the array ends
	{
		_ref = SHIORI3FW.EscapeAllTags(_ref)
		_display += "\n%(_num)- %(_ref)"
		_num ++
	}
	--
	"\_q\b2\![set,autoscroll,disable]%(_caller) \n[150]References:%(_display)\x"
}

OnEmbedTest
{
	"Argument:\n%(_argv)\nReference:\n%(REFTEST)\x"
}


OnDisplayTestMenu
{
	_testText = reference1
	"\_q\f[align,center]Select Mood\n[200]"
	--
	if _testText == ""
	{"\f[color,#00ffcc]\![*]\q[Neutral,OnDisplayTestMenu,,]  \f[color,default]"}
	else{"\![*]\q[Neutral,OnDisplayTestMenu,,]  "}
	--
	if _testText == "happy"
	{"\f[color,#00ffcc]\![*]\q[Happy,OnDisplayTestMenu,mood_happy,happy]  \f[color,default]"}
	else{"\![*]\q[Happy,OnDisplayTestMenu,mood_happy,happy]  "}
	--
	if _testText == "tired"
	{"\f[color,#00ffcc]\![*]\q[Tired,OnDisplayTestMenu,mood_tired,tired]\f[color,default]"}
	else{"\![*]\q[Tired,OnDisplayTestMenu,mood_tired,tired]"}
	--
	"\n[150]"
	--
	if _testText == "angry"
	{"\f[color,#00ffcc]\![*]\q[Angry,OnDisplayTestMenu,mood_angry,angry]  \f[color,default]"}
	else{"\![*]\q[Angry,OnDisplayTestMenu,mood_angry,angry]  "}
	--
	if _testText == "sad"
	{"\f[color,#00ffcc]\![*]\q[Sad,OnDisplayTestMenu,mood_sad,sad]  \f[color,default]"}
	else{"\![*]\q[Sad,OnDisplayTestMenu,mood_sad,sad]  "}
	--
	if _testText == "surprised"
	{"\f[color,#00ffcc]\![*]\q[Surprised,OnDisplayTestMenu,mood_surprised,surprised]\f[color,default]"}
	else{"\![*]\q[Surprised,OnDisplayTestMenu,mood_surprised,surprised]"}
	--
	"\n[150]"
	--
	if _testText == "scared"
	{"\f[color,#00ffcc]\![*]\q[Scared,OnDisplayTestMenu,mood_scared,scared]  \f[color,default]"}
	else{"\![*]\q[Scared,OnDisplayTestMenu,mood_scared,scared]  "}
	--
	if _testText == "confused"
	{"\f[color,#00ffcc]\![*]\q[Confused,OnDisplayTestMenu,mood_confused,confused]  \f[color,default]"}
	else{"\![*]\q[Confused,OnDisplayTestMenu,mood_confused,confused]  "}
	--
	if _testText == "creepy"
	{"\f[color,#00ffcc]\![*]\q[Creepy,OnDisplayTestMenu,mood_creepy,creepy]\f[color,default]"}
	else{"\![*]\q[Creepy,OnDisplayTestMenu,mood_creepy,creepy]"}
	--
	"\n[200]\q[Back,OnTestVariable]\e"
}

// ----- Weird testing stuff end -----
