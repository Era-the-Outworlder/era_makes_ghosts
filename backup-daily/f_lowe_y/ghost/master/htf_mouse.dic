//	                   __  __
//	                 ,',.\/,.`.
//	                 \(_,''._)/
//	                 ._(.||.)_,		                             
//	                 (,>(__)<.)		   _____                     
//	                 '`-.==,-'`		  |     | ___  _ _  ___  ___ 
//	                     )(_		  | | | || . || | ||_ -|| -_|
//	            _____ _.'   `-.		  |_|_|_||___||___||___||___|
//	       _.-''    ,','|    \.\
//	    ,-'         `-.`:  .  :\\_
//	   /,::::, ,::::, ,>))._ ,' `'`
//	  // ::::/ /::::/ /    )'/.
//	 // ::::/ /::::/ /   ,',|`.\
//	/______________/   /,'||'|))
//	\ _ _ __ _ _ _ \,':(_ |('((__
//	 \___(,.)SSt____\,|_)))_))`--`
//	     /,'
    


// ---- OnMouseMove ----


OnMouseMove
{
    case reference3 
	{
		when 0 
		{
			MouseMoveSakura
		}
		when 1
		{
			" * KERO Error: %(errorMsg)"
		}
		others 
		{
			" * CHAR* Error: * %(errorMsg)"
		}
    }
}


// ---- MouseMoveSakura ----
// The petting function for your main character.


MouseMoveSakura
{
	stroke++ 
    case reference4 
	{
	when "Petals"
	{
		if stroke >= 90
		{			
			stroke = 0 //resetting the stroke count
			petCount++
			case petCount
			{
			when 1-10
			{
				
				"\0\s[21]%(Flowey) * Stop. sssssssssssstop.  \_w[500]"
				"\0\s[9]%(Flowey) * Pat. Pet. \![embed,OnGLITCH,pat]\![embed,OnGLITCH,pet]\![embed,OnGLITCH,pot]\![embed,OnGLITCH,pat]\![embed,OnGLITCH,pot]\![embed,OnGLITCH,pet].  \_w[500]"
				"\0\s[21]%(Narrator) * (You get the feeling he might appreciate it more if you'd stop.) \_w[1500]"
				"\0\s[9]%(Narrator) * He seems to be enjoying this.\_w[500]"
			}
			when 11-50
			{
				"\0\s[9]%(Flowey) * Pat. Pet. \![embed,OnGLITCH,pat]\![embed,OnGlitchLite,pet]\![embed,OnGLITCH,pot]\![embed,OnGlitchLite,pat]\![embed,OnGlitchLite,pot]\![embed,OnGlitchLite,pet].  \_w[500]"
				"\0\s[9]%(Narrator) * He seems to be enjoying this.\_w[500]"
			}
			when 50-100
			{
				"\0\s[9]%(Flowey) * Pat. \![embed,OnGlitchLite,pat]\![embed,OnGlitchLite,pet]\![embed,OnGlitchLite,pot]\![embed,OnGlitchLite,pat]\![embed,OnGlitchLite,pot]\![embed,OnGlitchLite,pet].  \_w[500]"
				"\0\s[9]%(Narrator) * He seems to be enjoying this.\_w[500]"
			}
			others
			{
				"\0\s[9]%(Flowey) * Pat. patpetpotpatpotpet.  \_w[500]"
				"\0\s[9]%(Narrator) * He seems to be enjoying this.\_w[500]"
			}
			}
		}
	}
	when "Face" 
	{
		
		_face = OnGLITCH("face")

		if stroke >= 120
		{
			stroke = 0 //resetting the stroke count
			petCountNeg++
			case petCountNeg
			{
			when 0-100
			{
				"\0\s[21]%(Flowey) * Stop. sssssssssssstop. Why. %(_face)? \_w[500]"
				"\0\s[21]%(Narrator) * (You get the feeling he would appreciate it more if you'd \![embed,OnGlitchLite,stop] touching his face.) \_w[1500]"
			}
			others
			{
				"\0\s[17]%(Flowey)\f[height,25] * \![embed,OnGlitchLite,stop].\![embed,OnGlitchLite,stop].\![embed,OnGlitchLite,stop].\![embed,OnGlitchLite,stop]\f[default] \_w[500]"
				"\0\s[17]%(Narrator) * Does his anger amuse you? \_w[1500]"
			}
			}
		}
	}
	others 
	{
		stroke = 0
	}
    }
}


 
// -------- OnMouseDoubleClick --------
// Checks what button is clicking and which ghost body is being clicked on

OnMouseDoubleClick
{
	if reference5 == 0 //left button == 0 right button == 1
	{
		case reference3 // sakura == 0, kero == 1, char3 == 2, etc
		{
		when 0 
		{
			MouseDoubleClickSakura
		}
		when 1
		{
			MouseDoubleClickKero
		}
		others 
		{
			" * OnMouseDoubleClick: %(errorMsg)"
		}
		}
    }
}


// -------- MouseDoubleClickSakura --------
// Effects of being double-clicked
 
 
MouseDoubleClickSakura
{
 	if reference4 == "Face" //name of collision
	{
		if knifeTime >= 19
		{
			if killCount >= 5
			{
				EXP = EXP+knifeTime
				knifeTime = 0
				killCount = 0
				ellVee++
				"\0\s[15]\_v[mus\hit.wav]\_w[1500]\n\n\n\s[-1]\_v[mus\dust.wav]\_w[1500]"
				--
				"\1\[-1]\_v[mus\LV_increased.wav]\f[align,center] * YOU WIN! \_w[500]\e"
			}
			else
			{
				EXP = EXP+knifeTime
				knifeTime = 0
				killCount++
				"\0\_v[mus\hit.wav]\_w[100]\s[-1]\_w[1000]\s[21]\_v[mus\savestate_spam.wav]\_w[1000]\e"
			}
			
		}
		
		elseif knifeTime == 18
		{
			knifeTime++ 
			"\0\s[18]\1\s[-1]\_v[mus\hahaha.mp3] * Flowey is considering a violence. \_w[500]"
			"\0\s[18]%(Flowey) \f[height,30]Die.\f[default]\_w[500]"
			
		}
		elseif knifeTime >= 12
		{
			knifeTime++
			_stop = OnGLITCH("stop it")
			_cut = OnGLITCH("cut that out")
			_hey = OnGLITCH("hey you")
			"\0\s[15]\_v[mus\r_ack.wav] * %(_stop)!\_w[500]"
			"\0\s[21]\_v[mus\r_oh.wav] * %(_cut)!!\_w[500]"
			"\0\s[14]\1\s[-1]\_v[mus\r_screech.wav] * (Scared noises)\_w[500]"
			"\0\s[21]\_v[mus\r_hey.wav] * %(_hey)! \_w[500]"
			"\0\s[15]\_v[mus\hit.wav]\_w[500]"
		}
		elseif knifeTime >= 6
		{
			knifeTime++
			
			"\0\s[16]\_v[mus\r_ack.wav] * Ack! Why-\_w[500]"
			"\0\s[15]\_v[mus\r_oh.wav] * OW! You!\_w[500]"
			"\0\s[16]\1\s[-1]\_v[mus\r_screech.wav] * (Angrier noises)\_w[500]"
			"\0\s[16]\_v[mus\r_hey.wav] * Hey! Stop! \_w[500]"
			"\0\s[15]\_v[mus\hit.wav]\_w[500]"
		}
		else
		{
			knifeTime++
			
			"\0\s[15]\_v[mus\r_ack.wav] * Ack!\_w[500]"
			"\0\s[12]\_v[mus\r_oh.wav] * OW!\_w[500]"
			"\0\s[12]\1\s[-1]\_v[mus\r_screech.wav] * (Angry noises)\_w[500]"
			"\0\s[12]\_v[mus\r_hey.wav] * Hey! \_w[500]"
			"\0\s[15]\_v[mus\hit.wav]\_w[500]"
			
		}
		
		--
			"\e"
			"\n\n\n\n\n\n\_w[1000]%(Narrator)\f[color,250,0,0] * ( %(knifeTime) )\f[color,default]\_w[1000]\e"

 	}
	else
 	{
 		OpenSakuraMenu
	}
 }

MouseDoubleClickKero
{
	
	" * MouseDoubleClickKero: %(errorMsg)\e"
}

// ----OnMouseWheel----
// When the wheel of a mouse moves

OnMouseWheel
{
	if reference4 == "Face"
	{
		flickCount++
		"\0\s[27]\_v[mus\swipe.wav]\e" //\n\f[height,100]\f[color,255,0,0] MISS\f[default]
	}
}


// ----OnMouseDragStart----
// When dragging of ghost starts

OnMouseDragStart
{
	if !talkCheck
	{"\_v[mus\encounter.wav]"}
}


// ----OnMouseDragEnd----
// When dragging of ghost ends.

OnMouseDragEnd
{
	if !talkCheck
	{"\_v[mus\battle_start.wav]"}
}


OnMouseDownEx
{
	case reference5
	{
	when "middle"
	{
		"\s[26]\i[0]"
		// "Mouse Wheel/Middle"
	}
	when "xbutton1"
	{
		"\s[27]"
		// "Extended Button 1"
	}
	when "xbutton2"
	{
		"\s[29]"
		// "Extended Button 2"
	}
	}
}


// Occurs when mouse buttons other than left and right are pressed.

// Reference0
// X coordinate (local coordinate) of the mouse cursor
// Reference1
// The y coordinate (local coordinate) of the mouse cursor
// Reference2
// Always 0.
// Reference3
// 0 for the main body, 1 for the companion. There are also 2 and later in SSP / CROW.
// Reference4
// Collision detection identifier.
// Reference5
// Wheel clicks (or 3 button mouse middle buttons) are middle, extended button 1 (usually assigned to "back") is xbutton1, and extended button 2 (usually assigned to "forward") is xbutton2.
// Reference6
// After windows7, input from the touch panel (* touch pad is not possible) in a multi-touch compatible environment is touch, input from the mouse etc. is mouse



// ---- Some of these are questionable but being preserved <3 Era



//----OnMouseEnter----
// When the mouse enters any collision area of the ghost.

// OnMouseEnter
// {
	// "\0\s[3]\_v[trill.wav]OnMouseEnter Test.\e"
// }
	
//----OnMouseEnterAll----
// When the mouse enters the outermost boundary of the ghost.

// OnMouseEnterAll
// {
	// "\0\s[3]\_v[trill.wav]I am currently fuctional.\e"
// }

//----OnMouseLeave----
// When the mouse leaves any collision area of the ghost.

// OnMouseLeave
// {
	// "\0\s[3]\_v[trill.wav]OnMouseLeave Test.\e"
// }

//----OnMouseLeaveAll----
//When the mouse leaves the outermost boundary of the ghost.

// OnMouseLeaveAll
// {
	// "\0\s[3]\_v[trill.wav]OnMouseLeaveAll Test.\e"
// }


